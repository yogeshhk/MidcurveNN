%!PS-Adobe-3.1 EPSF-3.0%%Title: SDlogo-3p.eps%%Creator: Adobe Illustrator(R) X%%AI8_CreatorVersion: 10.0%AI9_PrintingDataBegin%%For: Krishna G S%%CreationDate: 5/9/11%%BoundingBox: 0 0 170 34%%HiResBoundingBox: 0 0 169.8428 33.8292%%CropBox: 0 0 169.8428 33.8292%%LanguageLevel: 2%%DocumentData: Clean7Bit%ADOBeginClientInjection: DocumentHeader "AI10"%ADOEndClientInjection: DocumentHeader "AI10"%%Pages: 1%%DocumentNeededResources: %%DocumentSuppliedResources: procset Adobe_AGM_Image (1.0 0)%%+ procset Adobe_CoolType_Utility_MAKEOCF (1.13 0)%%+ procset Adobe_CoolType_Core (2.12 0)%%+ procset Adobe_AGM_Core (2.0 0)%%+ procset Adobe_AGM_Utils (1.0 0)%%DocumentFonts: %%DocumentNeededFonts: %%DocumentNeededFeatures: %%DocumentSuppliedFeatures: %%DocumentProcessColors: %%DocumentCustomColors: (PANTONE Black CVC)%%CMYKCustomColor: 0 0 0 1 (PANTONE Black CVC)%%RGBCustomColor: %%EndComments%%BeginDefaults%%ViewingOrientation: 1 0 0 1%%EndDefaults%%BeginProlog%ADOBeginClientInjection: DocumentProlog Start "AI10"%ADOEndClientInjection: DocumentProlog Start "AI10"%%BeginResource: procset Adobe_AGM_Utils 1.0 0%%Version: 1.0 0%%Copyright: Copyright (C) 2000-2000 Adobe Systems, Inc.  All Rights Reserved.systemdict /setpacking known{	currentpacking	true setpacking} ifuserdict /Adobe_AGM_Utils 60 dict dup begin put/bdf{	bind def} bind def/nd{	null def}bdf/xdf{	exch def}bdf/ldf {	load def}bdf/ddf{	put}bdf	/xddf{	3 -1 roll put}bdf	/xpt{	exch put}bdf/ndf{ 		exch dup where{		pop pop pop	}{		xdf	}ifelse}def/cdndf{	exch dup currentdict exch known{		pop pop	}{		exch def	}ifelse}def/bdict{	mark}bdf/edict{	counttomark 2 idiv dup dict begin {def} repeat pop currentdict end}def	/ps_level	/languagelevel where{		pop systemdict /languagelevel get exec	}{		1	}ifelsedef/level2 	ps_level 2 gedef/level3 	ps_level 3 gedef/ps_version	{version cvr} stopped {		-1	}ifdef/makereadonlyarray{	/packedarray where{		pop packedarray	}{		array astore readonly	}ifelse}bdf/map_reserved_ink_name{	dup type /stringtype eq{		dup /Red eq{			pop (_Red_)		}{			dup /Green eq{				pop (_Green_)			}{				dup /Blue eq{					pop (_Blue_)				}{					dup /Cyan eq{						pop (_Cyan_)					}{						dup /Magenta eq{							pop (_Magenta_)						}{							dup /Yellow eq{								pop (_Yellow_)							}{								dup /Black eq{									pop (_Black_)								}{									dup () cvn eq{										pop (Process)									}if								}ifelse							}ifelse						}ifelse					}ifelse				}ifelse			}ifelse		}ifelse	}if}bdf/AGMUTIL_GSTATE 22 dict def/get_gstate{	AGMUTIL_GSTATE begin	/AGMUTIL_GSTATE_clr_spc currentcolorspace def	/AGMUTIL_GSTATE_clr_indx 0 def	/AGMUTIL_GSTATE_clr_comps 12 array def	mark currentcolor counttomark		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def} repeat pop	/AGMUTIL_GSTATE_fnt rootfont def	/AGMUTIL_GSTATE_lw currentlinewidth def	/AGMUTIL_GSTATE_lc currentlinecap def	/AGMUTIL_GSTATE_lj currentlinejoin def	/AGMUTIL_GSTATE_ml currentmiterlimit def	currentdash /AGMUTIL_GSTATE_do xdf /AGMUTIL_GSTATE_da xdf	/AGMUTIL_GSTATE_sa currentstrokeadjust def		/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def	/AGMUTIL_GSTATE_op currentoverprint def	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def	currentcolortransfer cvlit /AGMUTIL_GSTATE_gy_xfer xdf cvlit /AGMUTIL_GSTATE_b_xfer xdf		cvlit /AGMUTIL_GSTATE_g_xfer xdf cvlit /AGMUTIL_GSTATE_r_xfer xdf	/AGMUTIL_GSTATE_ht currenthalftone def	/AGMUTIL_GSTATE_flt currentflat def	end}def/set_gstate{	AGMUTIL_GSTATE begin	AGMUTIL_GSTATE_clr_spc setcolorspace	AGMUTIL_GSTATE_clr_indx {AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def} repeat setcolor	AGMUTIL_GSTATE_fnt setfont	AGMUTIL_GSTATE_lw setlinewidth	AGMUTIL_GSTATE_lc setlinecap	AGMUTIL_GSTATE_lj setlinejoin	AGMUTIL_GSTATE_ml setmiterlimit	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash	AGMUTIL_GSTATE_sa setstrokeadjust		AGMUTIL_GSTATE_clr_rnd setcolorrendering	AGMUTIL_GSTATE_op setoverprint	AGMUTIL_GSTATE_bg cvx setblackgeneration	AGMUTIL_GSTATE_ucr cvx setundercolorremoval	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer		AGMUTIL_GSTATE_ht /HalftoneType get dup 9 eq exch 100 eq or		{		currenthalftone /HalftoneType get AGMUTIL_GSTATE_ht /HalftoneType get ne			{			  mark AGMUTIL_GSTATE_ht {sethalftone} stopped cleartomark			} if		}{		AGMUTIL_GSTATE_ht sethalftone		} ifelse		AGMUTIL_GSTATE_flt setflat	end}def/AGMUTIL_str256 256 string def/AGMUTIL_src256 256 string def/AGMUTIL_dst64 64 string def/AGMUTIL_srcLen nd/AGMUTIL_ndx nd/rdline{	currentfile AGMUTIL_str256 readline pop} bdf/rdcmntline{	currentfile AGMUTIL_str256 readline pop	(%) anchorsearch {pop} if} bdf/filter_cmyk{		dup type /filetype ne{		0 () /SubFileDecode filter	}if	[	exch	{		AGMUTIL_src256 readstring pop		dup length /AGMUTIL_srcLen exch def		/AGMUTIL_ndx 0 def				AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{			1 index exch get			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put			/AGMUTIL_ndx AGMUTIL_ndx 1 add def		}for		pop		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval	}	bind	/exec cvx	] cvx} bdf/AGMUTIL_imagefile nd/AGMUTIL_imbuf nd/read_image_file{	AGMUTIL_imagefile 0 setfileposition	dup /DataSource {AGMUTIL_imagefile AGMUTIL_imbuf readstring pop} put	exch	load exec}def/write_image_file{	begin	{ (AGMUTIL_imagefile) (w+) file } stopped{		false	}{		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 		Adobe_AGM_Utils/AGMUTIL_imbuf Width BitsPerComponent mul 7 add 8 idiv string ddf		1 1 Height { 			pop			DataSource dup type /filetype eq{				AGMUTIL_imbuf readstring pop			}{				exec			} ifelse			AGMUTIL_imagefile exch writestring		}for		true	}ifelse	end}def/close_image_file{	AGMUTIL_imagefile closefile (AGMUTIL_imagefile) deletefile}def/consumeimagedata{	begin	currentdict /MultipleDataSources known not		{/MultipleDataSources false def} if	MultipleDataSources		{		1 dict begin		/flushbuffer Width cvi string def		1 1 Height cvi			{			pop			0 1 DataSource length 1 sub				{				DataSource exch get				dup type dup 				/filetype eq					{					exch flushbuffer readstring pop pop					}if				/arraytype eq					{					exec pop					}if				}for			}for		end		}		{		/DataSource load type dup 		/filetype eq			{			1 dict begin			/flushbuffer Width Decode length 2 div mul cvi string def			1 1 Height { pop DataSource flushbuffer readstring pop pop} for			end			}if		/arraytype eq			{			1 1 Height { pop DataSource pop } for			}if		}ifelse	end}bdf/addprocs{     2{/exec load}repeat     3 1 roll     [ 5 1 roll ] bind cvx}def/modify_halftone_xfer{	currenthalftone dup length dict copy begin    currentdict 2 index known{    	1 index load dup length dict copy begin		currentdict/TransferFunction known{			/TransferFunction load		}{			currenttransfer		}ifelse	    addprocs /TransferFunction xdf 	    currentdict end def		currentdict end sethalftone	}{ 		currentdict/TransferFunction known{			/TransferFunction load 		}{			currenttransfer		}ifelse		addprocs /TransferFunction xdf		currentdict end sethalftone				pop	}ifelse}def/doc_setup{	Adobe_AGM_Utils begin}bdf/doc_trailer{	currentdict Adobe_AGM_Utils eq{		end	}if}bdfsystemdict /setpacking known{	setpacking} if%%EndResource%%BeginResource: procset Adobe_AGM_Core 2.0 0%%Version: 2.0 0%%Copyright: Copyright (C) 1997-1999 Adobe Systems, Inc.  All Rights Reserved.systemdict /setpacking known{	currentpacking	true setpacking} ifuserdict /Adobe_AGM_Core 205 dict dup begin put/nd{	null def}bind def/Adobe_AGM_Core_Id /Adobe_AGM_Core_2.0_0 def/AGMCORE_str256 256 string def/AGMCORE_src256 256 string def/AGMCORE_save nd/AGMCORE_graphicsave nd/AGMCORE_c 0 def/AGMCORE_m 0 def/AGMCORE_y 0 def/AGMCORE_k 0 def/AGMCORE_cmykbuf 4 array def/AGMCORE_screen [currentscreen] cvx def/AGMCORE_tmp 0 def/AGMCORE_&setgray nd/AGMCORE_&setcolor nd/AGMCORE_&setcolorspace nd/AGMCORE_&setcmykcolor nd/AGMCORE_cyan_plate nd/AGMCORE_magenta_plate nd/AGMCORE_yellow_plate nd/AGMCORE_black_plate nd/AGMCORE_plate_ndx nd/AGMCORE_get_ink_data nd/AGMCORE_is_cmyk_sep nd/AGMCORE_host_sep nd/AGMCORE_will_host_sep nd/AGMCORE_avoid_L2_sep_space nd/AGMCORE_distilling nd/AGMCORE_composite_job nd/AGMCORE_producing_seps nd/AGMCORE_ps_level -1 def/AGMCORE_ps_version -1 def/AGMCORE_environ_ok nd/AGMCORE_CSA_cache 0 dict def/AGMCORE_CSD_cache 0 dict def/AGMCORE_pattern_cache 0 dict def/AGMCORE_currentoverprint false def/AGMCORE_deltaX nd/AGMCORE_deltaY nd/AGMCORE_name nd/AGMCORE_sep_special nd/AGMCORE_err_strings 4 dict def/AGMCORE_cur_err nd/AGMCORE_ovp nd/AGMCORE_current_spot_alias false def/AGMCORE_inverting false def/AGMCORE_feature_dictCount nd/AGMCORE_feature_opCount nd/AGMCORE_feature_ctm nd/AGMCORE_ConvertToProcess false def/AGMCORE_Default_CTM matrix def/knockout_unitsq nd/AGMCORE_CRD_cache where{	pop}{	/AGMCORE_CRD_cache 0 dict def}ifelse/AGMCORE_key_known{	where{		/Adobe_AGM_Core_Id known	}{		false	}ifelse}ndf/flushinput{	save	/CompareBuffer 3 -1 roll def	/readbuffer 256 string def	mark	{	currentfile readbuffer {readline} stopped		{cleartomark mark}		{		not			{pop exit}		if		CompareBuffer eq			{exit}		if		}ifelse	}loop	cleartomark	restore}bdf/getspotfunction{	AGMCORE_screen exch pop exch pop	dup type /dicttype eq{		dup /HalftoneType get 1 eq{			/SpotFunction get		}{			dup /HalftoneType get 2 eq{				/GraySpotFunction get			}{ 				pop				{					abs exch abs 2 copy add 1 gt{						1 sub dup mul exch 1 sub dup mul add 1 sub					}{						dup mul exch dup mul add 1 exch sub					}ifelse				}bind			}ifelse		}ifelse	}if} def/clp_npth{	clip newpath} def/eoclp_npth{	eoclip newpath} def/stkpath_clp_npth{	strokepath clip newpath} def/stk_n_clp_npth{	gsave stroke grestore clip newpath} def/npth_clp{	newpath clip} def/graphic_setup{	/AGMCORE_graphicsave save def	concat	0 setgray	0 setlinecap	0 setlinejoin	1 setlinewidth	[] 0 setdash	10 setmiterlimit	newpath	false setoverprint	false setstrokeadjust	Adobe_AGM_Core/spot_alias get exec	/Adobe_AGM_Image where {		pop		Adobe_AGM_Image/spot_alias 2 copy known{			get exec		}{			pop pop		}ifelse	} if	100 dict begin	/showpage {} def	mark} def/graphic_cleanup{	cleartomark	end	AGMCORE_graphicsave restore} def/compose_error_msg{	grestoreall initgraphics		/Helvetica findfont 10 scalefont setfont		/AGMCORE_deltaY 100 def	/AGMCORE_deltaX 310 def				clippath pathbbox newpath pop pop 36 add exch 36 add exch moveto	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath	0 AGMCORE_&setgray	gsave 1 AGMCORE_&setgray fill grestore 	1 setlinewidth gsave stroke grestore			currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto		/AGMCORE_deltaY 12 def	/AGMCORE_tmp 0 def	AGMCORE_err_strings exch get		{		dup 32 eq			{			pop			AGMCORE_str256 0 AGMCORE_tmp getinterval			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt				{				currentpoint AGMCORE_deltaY sub exch pop				clippath pathbbox pop pop pop 44 add exch moveto				} if			AGMCORE_str256 0 AGMCORE_tmp getinterval show ( ) show						0 1 AGMCORE_str256 length 1 sub				{				AGMCORE_str256 exch 0 put				}for			/AGMCORE_tmp 0 def			}			{				AGMCORE_str256 exch AGMCORE_tmp exch put				/AGMCORE_tmp AGMCORE_tmp 1 add def			} ifelse		} forall} bdf/doc_setup{	Adobe_AGM_Core begin		/AGMCORE_will_host_separate xdf	/AGMCORE_ps_version xdf	/AGMCORE_ps_level xdf		errordict /AGM_handleerror known not{		errordict /AGM_handleerror errordict /handleerror get put		errordict /handleerror {			Adobe_AGM_Core begin			$error /newerror get AGMCORE_cur_err null ne and{				$error /newerror false put				AGMCORE_cur_err compose_error_msg			}if			$error /newerror true put			end			errordict /AGM_handleerror get exec			} bind put		}if			/AGMCORE_environ_ok 		ps_level AGMCORE_ps_level ge		ps_version AGMCORE_ps_version ge and 		AGMCORE_ps_level -1 eq or	def		AGMCORE_environ_ok not		{/AGMCORE_cur_err /AGMCORE_bad_environ def} if		/AGMCORE_&setgray systemdict/setgray get def	level2{		/AGMCORE_&setcolor systemdict/setcolor get def		/AGMCORE_&setcolorspace systemdict/setcolorspace get def	}if	/AGMCORE_distilling		/product where{			pop systemdict/setdistillerparams known product (Adobe PostScript Parser) ne and		}{			false		}ifelse	def	/AGMCORE_in_rip_sep		/AGMCORE_in_rip_sep where{			pop AGMCORE_in_rip_sep		}{			AGMCORE_distilling 			{				false			}{				userdict/Adobe_AGM_OnHost_Seps known{					false				}{					level2{						currentpagedevice/Separations 2 copy known{							get						}{							pop pop false						}ifelse					}{						false					}ifelse				}ifelse			}ifelse		}ifelse	def	level2 not{		/xput{			dup load dup length exch maxlength eq{				dup dup load dup				length dup 0 eq {pop 1} if 2 mul dict copy def			}if			load begin				def 			end		}def	}{		/xput{			load 3 1 roll put		}def	}ifelse	/AGMCORE_GSTATE AGMCORE_key_known not{		/AGMCORE_GSTATE 21 dict def		/AGMCORE_gstack 32 array def		/AGMCORE_gstackptr 0 def		/AGMCORE_gstacksaveptr 0 def		/AGMCORE_gstackframekeys 8 def													/AGMCORE_&gsave /gsave ldf		/AGMCORE_&grestore /grestore ldf		/AGMCORE_&grestoreall /grestoreall ldf		/AGMCORE_&save /save ldf		/AGMCORE_gdictcopy {			begin			{ def } forall			end		}def		/AGMCORE_gput {			AGMCORE_gstack AGMCORE_gstackptr get			3 1 roll			put		}def		/AGMCORE_gget {			AGMCORE_gstack AGMCORE_gstackptr get			exch			get		}def		/gsave {			AGMCORE_&gsave			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gstackptr 1 add			dup 32 ge {limitcheck} if			Adobe_AGM_Core exch			/AGMCORE_gstackptr exch put			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gdictcopy		}def		/grestore {			AGMCORE_&grestore			AGMCORE_gstackptr 1 sub			dup AGMCORE_gstacksaveptr lt {1 add} if			Adobe_AGM_Core exch			/AGMCORE_gstackptr exch put		}def		/grestoreall {			AGMCORE_&grestoreall			Adobe_AGM_Core			/AGMCORE_gstackptr AGMCORE_gstacksaveptr put 		}def		/save {			AGMCORE_&save			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gstackptr 1 add			dup 32 ge {limitcheck} if			Adobe_AGM_Core begin				/AGMCORE_gstackptr exch def				/AGMCORE_gstacksaveptr AGMCORE_gstackptr def			end			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gdictcopy		}def		0 1 AGMCORE_gstack length 1 sub {				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put		} for	}if	/currentcmykcolor [0 0 0 0] AGMCORE_gput	/currentstrokeadjust false AGMCORE_gput	/currentcolorspace [/DeviceGray] AGMCORE_gput	/sep_tint 0 AGMCORE_gput	/sep_colorspace_dict null AGMCORE_gput	/indexed_colorspace_dict null AGMCORE_gput	/currentcolor_intent () AGMCORE_gput	/customcolor_tint 1 AGMCORE_gput	end}def/page_setup{	/setcmykcolor where{		pop		Adobe_AGM_Core/AGMCORE_&setcmykcolor /setcmykcolor load put	}if	Adobe_AGM_Core begin	/setcmykcolor	{		4 copy AGMCORE_cmykbuf astore /currentcmykcolor exch AGMCORE_gput		1 sub 4 1 roll		3 {			3 index add neg dup 0 lt {				pop 0			} if			3 1 roll		} repeat		setrgbcolor pop	}ndf	/currentcmykcolor	{		/currentcmykcolor AGMCORE_gget aload pop	}ndf	/setoverprint	{		pop	}ndf	/currentoverprint	{		false	}ndf	/AGMCORE_deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt def	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def	/AGMCORE_plate_ndx 		AGMCORE_cyan_plate{ 			0		}{			AGMCORE_magenta_plate{				1			}{				AGMCORE_yellow_plate{					2				}{					AGMCORE_black_plate{						3					}{						4					}ifelse				}ifelse			}ifelse		}ifelse		def	/AGMCORE_composite_job		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def		/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def		/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def		/AGM_preserve_spots 		/AGM_preserve_spots where{			pop AGM_preserve_spots		}{			AGMCORE_distilling AGMCORE_producing_seps or		}ifelse	def	/AGM_is_distiller_preserving_spotimages	{		currentdistillerparams/PreserveOverprintSettings known		{			currentdistillerparams/PreserveOverprintSettings get				{					currentdistillerparams/ColorConversionStrategy known					{						currentdistillerparams/ColorConversionStrategy get						/LeaveColorUnchanged eq					}{						true					}ifelse				}{					false				}ifelse		}{			false		}ifelse	}def	/convert_spot_to_process where {pop}{		/convert_spot_to_process		{			dup dup (None) eq exch (All) eq or				{				pop false				}{				AGMCORE_host_sep				{ 					gsave					1 0 0 0 setcmykcolor currentgray 1 exch sub					0 1 0 0 setcmykcolor currentgray 1 exch sub					0 0 1 0 setcmykcolor currentgray 1 exch sub					0 0 0 1 setcmykcolor currentgray 1 exch sub					add add add 0 eq					{						pop false					}{						false setoverprint						1 1 1 1 5 -1 roll findcmykcustomcolor 1 setcustomcolor						currentgray 0 eq					}ifelse					grestore				}{					AGMCORE_distilling					{						pop AGM_is_distiller_preserving_spotimages not					}{						Adobe_AGM_Core/AGMCORE_name xddf						false						currentpagedevice/OverrideSeparations known							{							currentpagedevice/OverrideSeparations get								{								/HqnSpots /ProcSet resourcestatus									{									pop pop pop true									}if								}if							}if												{							AGMCORE_name /HqnSpots /ProcSet findresource /TestSpot get exec not							}{							gsave							[/Separation AGMCORE_name /DeviceGray {}]setcolorspace							false							currentpagedevice/SeparationColorNames 2 copy known							{								get								{ AGMCORE_name eq or}forall							not							}{								pop pop pop true							}ifelse							grestore						}ifelse					}ifelse				}ifelse			}ifelse		}def	}ifelse	/convert_to_process where {pop}{		/convert_to_process		{			dup length 0 eq				{				pop false				}{				AGMCORE_host_sep				{ 				true exch					{					convert_spot_to_process and					}				forall				}{				false exch					{					convert_spot_to_process or					}				forall				}ifelse			}ifelse		}def	}ifelse		AGMCORE_host_sep AGMCORE_will_host_separate not and {		/AGMCORE_cur_err /AGMCORE_color_space_onhost_seps def		AGMCORE_color_space_onhost_seps	}if	/AGMCORE_avoid_L2_sep_space  		version cvr 2012 lt 		level2 and 		AGMCORE_producing_seps not and	def	/AGMCORE_is_cmyk_sep		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or	def	/AGM_avoid_0_cmyk where{		pop AGM_avoid_0_cmyk	}{		AGM_preserve_spots 		userdict/Adobe_AGM_OnHost_Seps known 		userdict/Adobe_AGM_InRip_Seps known or		not and	}ifelse	{		/setcmykcolor[			{				4 copy add add add 0 eq currentoverprint and{					pop 0.0005				}if			}/exec cvx			/AGMCORE_&setcmykcolor load dup type/operatortype ne{				/exec cvx			}if		]cvx def	}if	AGMCORE_host_sep{		/AGMCORE_get_ink_data			AGMCORE_cyan_plate{				{pop pop pop}			}{			  	AGMCORE_magenta_plate{			  		{4 3 roll pop pop pop}			  	}{			  		AGMCORE_yellow_plate{			  			{4 2 roll pop pop pop}			  		}{			  			{4 1 roll pop pop pop}			  		}ifelse			  	}ifelse			}ifelse		def		/clip AGMCORE_key_known not{			Adobe_AGM_Core/AGMCORE_&clip /clip load put			/clip			{				current_spot_alias{					currentdict/InksUsed known{						[						InksUsed{							dup map_alias{								/Name get exch pop							}if						}forall						]						/InksUsed xdf					}if				}if				AGMCORE_&clip			}def		}if		/eoclip AGMCORE_key_known not{			Adobe_AGM_Core/AGMCORE_&eoclip /eoclip load put			/eoclip			{				current_spot_alias{					currentdict/InksUsed known{						[						InksUsed{							dup map_alias{								/Name get exch pop							}if						}forall						]						/InksUsed xdf					}if				}if				AGMCORE_&eoclip			}def		}if	}if	AGMCORE_in_rip_sep{		/setcustomcolor		{			exch aload pop			dup 7 1 roll inRip_spot_has_ink not	{ 				4 {4 index mul 4 1 roll}				repeat				/DeviceCMYK setcolorspace				6 -2 roll pop pop			}{ 				Adobe_AGM_Core begin					/AGMCORE_k xdf /AGMCORE_y xdf /AGMCORE_m xdf /AGMCORE_c xdf				end				[/Separation 4 -1 roll /DeviceCMYK				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}				]				setcolorspace			}ifelse			setcolor		}ndf		/setseparationgray		{			[/Separation (All) /DeviceGray {}] setcolorspace_opt			1 exch sub setcolor		}ndf	}{		/setseparationgray		{			AGMCORE_&setgray		}ndf	}ifelse	/findcmykcustomcolor	{		5 makereadonlyarray	}ndf	/setcustomcolor	{		exch aload pop pop		4 {4 index mul 4 1 roll} repeat		setcmykcolor pop	}ndf		/has_color		/colorimage where{			AGMCORE_producing_seps{				pop true			}{				systemdict eq			}ifelse		}{			false		}ifelse	def		/map_index	{		1 index mul exch getinterval {255 div} forall	}def		level2{		/mo /moveto ldf		/li /lineto ldf		/cv /curveto ldf		/knockout_unitsq		{			1 setgray			0 0 1 1 rectfill		}def		/level2ScreenFreq{			begin			60			HalftoneType 1 eq{				pop Frequency			}if			HalftoneType 2 eq{				pop GrayFrequency			}if			HalftoneType 5 eq{				pop Default level2ScreenFreq			}if			 end		}def		/currentScreenFreq{			currenthalftone level2ScreenFreq		}def		level2 /setcolorspace AGMCORE_key_known not and{					/AGMCORE_&&&setcolorspace /setcolorspace ldf			/AGMCORE_ReplaceMappedColor			{				dup type dup /arraytype eq exch /packedarraytype eq or				{					dup 0 get dup /Separation eq					{						pop						dup length array copy						dup dup 1 get						current_spot_alias						{							dup map_alias							{								begin								/sep_colorspace_dict currentdict AGMCORE_gput								pop pop	pop																	[ 									/Separation Name 									CSA map_csa									dup /MappedCSA xdf 									/sep_colorspace_proc load								]								dup Name								end							}if						}if						map_reserved_ink_name 1 exch put					}{						/DeviceN eq 						{							dup length array copy							dup dup 1 get [ 								exch {									current_spot_alias{										dup map_alias{											/Name get exch pop										}if									}if									map_reserved_ink_name								} forall 							] 1 exch put						}if					}ifelse				}if			}def			/setcolorspace			{				dup type dup /arraytype eq exch /packedarraytype eq or				{					dup 0 get /Indexed eq					{						AGMCORE_distilling						{							/PhotoshopDuotoneList where							{								pop false							}{								true							}ifelse						}{							true						}ifelse						{							aload pop 3 -1 roll							AGMCORE_ReplaceMappedColor							3 1 roll 4 array astore						}if					}{						AGMCORE_ReplaceMappedColor					}ifelse				}if				AGMCORE_&&&setcolorspace			}def		}if		}{				/adj		{			currentstrokeadjust{				transform				0.25 sub round 0.25 add exch				0.25 sub round 0.25 add exch				itransform			}if		}def		/mo{			adj moveto		}def		/li{			adj lineto		}def		/cv{			6 2 roll adj			6 2 roll adj			6 2 roll adj curveto		}def		/knockout_unitsq		{			1 setgray			8 8 1 [8 0 0 8 0 0] {<ffffffffffffffff>} image		}def		/currentstrokeadjust{			/currentstrokeadjust AGMCORE_gget		}def		/setstrokeadjust{			/currentstrokeadjust exch AGMCORE_gput		}def		/currentScreenFreq{			currentscreen pop pop		}def		/setcolorspace		{			/currentcolorspace exch AGMCORE_gput		} def				/currentcolorspace		{			/currentcolorspace AGMCORE_gget		} def				/n_color_components		{			dup type /arraytype eq{				0 get			}if			dup /DeviceGray eq{				pop 1			}{				/DeviceCMYK eq{					4				}{					3				}ifelse			}ifelse		} def				/setcolor_devicecolor		{			dup type /arraytype eq{				0 get			}if			dup /DeviceGray eq{				pop setgray			}{				/DeviceCMYK eq{					setcmykcolor				}{					setrgbcolor				}ifelse			}ifelse		}def			/setcolor		{			currentcolorspace 0 get			dup /DeviceGray ne{				dup /DeviceCMYK ne{					dup /DeviceRGB ne{						dup /Separation eq{							pop							currentcolorspace 3 get exec							currentcolorspace 2 get						}{							dup /Indexed eq{								pop								currentcolorspace 3 get dup type /stringtype eq{									currentcolorspace 1 get n_color_components									3 -1 roll map_index								}{									exec								}ifelse								currentcolorspace 1 get							}{								/AGMCORE_cur_err /AGMCORE_invalid_color_space def								AGMCORE_invalid_color_space							}ifelse						}ifelse					}if				}if			}if			setcolor_devicecolor		} def	}ifelse		/sop /setoverprint ldf	/lw /setlinewidth ldf	/lc /setlinecap ldf	/lj /setlinejoin ldf	/ml /setmiterlimit ldf	/dsh /setdash ldf	/sadj /setstrokeadjust ldf	/gry /setgray ldf	/rgb /setrgbcolor ldf	/cmyk /setcmykcolor ldf	/sep /setsepcolor ldf	/idx /setindexedcolor ldf	/colr /setcolor ldf	/csacrd /set_csa_crd ldf	/sepcs /setsepcolorspace ldf	/idxcs /setindexedcolorspace ldf	/cp /closepath ldf	/clp /clp_npth ldf	/eclp /eoclp_npth ldf	/spclp /stkpath_clp_npth ldf	/f /fill ldf	/ef /eofill ldf	/s /stroke ldf	/sclp /stk_n_clp_npth ldf	/nclp /npth_clp ldf	/gset /graphic_setup ldf	/gcln /graphic_cleanup ldf		currentdict{		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and {			bind		}if		def	}forall}def/page_trailer{	end}def/doc_trailer{}defsystemdict /findcolorrendering known{	/findcolorrendering systemdict /findcolorrendering get def}ifsystemdict /setcolorrendering known{	/setcolorrendering systemdict /setcolorrendering get def}if/test_cmyk_color_plate{	gsave	setcmykcolor currentgray 1 ne	grestore}def/inRip_spot_has_ink{	dup Adobe_AGM_Core/AGMCORE_name xddf	convert_spot_to_process not}def/current_ink{	dup length 0 eq{		pop true	}{		Adobe_AGM_Core/ink_result false put		{			dup /ProcessCyan eq{				AGMCORE_cyan_plate ink_result or Adobe_AGM_Core/ink_result xddf			}{				dup /ProcessMagenta eq{					AGMCORE_magenta_plate ink_result or Adobe_AGM_Core/ink_result xddf				}{					dup /ProcessYellow eq{						AGMCORE_yellow_plate ink_result or Adobe_AGM_Core/ink_result xddf					}{						dup /ProcessBlack eq{							AGMCORE_black_plate ink_result or Adobe_AGM_Core/ink_result xddf						}{							dup /sep_colorspace_dict AGMCORE_gget dup null eq{								pop false ink_result or Adobe_AGM_Core/ink_result xddf							}{								/Name get eq{									1 setsepcolor									currentgray 1 ne ink_result or Adobe_AGM_Core/ink_result xddf								}{									false ink_result or Adobe_AGM_Core/ink_result xddf								}ifelse							}ifelse						}ifelse					}ifelse				}ifelse			}ifelse			pop 		} forall		ink_result	}ifelse}def/map255_to_range{	1 index sub	3 -1 roll 255 div mul add}def/set_csa_crd{	/sep_colorspace_dict null AGMCORE_gput	begin		CSA map_csa setcolorspace_opt		set_crd	end}def/setsepcolor{ 		/sep_colorspace_dict AGMCORE_gget begin		dup /sep_tint exch AGMCORE_gput		TintProc	end} def/sep_colorspace_proc{	Adobe_AGM_Core/AGMCORE_tmp xddf	/sep_colorspace_dict AGMCORE_gget begin	currentdict/Components known{		Components aload pop 		TintMethod/Lab eq{			2 {AGMCORE_tmp mul NComponents 1 roll} repeat			LMax sub AGMCORE_tmp mul LMax add  NComponents 1 roll		}{			TintMethod/Subtractive eq{				NComponents{					AGMCORE_tmp mul NComponents 1 roll				}repeat			}{				NComponents{					1 sub AGMCORE_tmp mul 1 add  NComponents 1 roll				} repeat			}ifelse		}ifelse	}{		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get		aload pop	}ifelse	end} def/sep_colorspace_gray_proc{	Adobe_AGM_Core/AGMCORE_tmp xddf	/sep_colorspace_dict AGMCORE_gget begin	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get	end} def/sep_proc_name{	dup 0 get 	dup /DeviceRGB eq exch /DeviceCMYK eq or level2 not and has_color not and{		pop [/DeviceGray]		/sep_colorspace_gray_proc	}{		/sep_colorspace_proc	}ifelse} def/setsepcolorspace{ 		current_spot_alias{		dup begin			Name map_alias{				exch pop			}if		end	}if	dup /sep_colorspace_dict exch AGMCORE_gput	begin	/MappedCSA CSA map_csa def	Adobe_AGM_Core/AGMCORE_sep_special Name dup () eq exch (All) eq or ddf		AGMCORE_avoid_L2_sep_space{		[/Indexed MappedCSA sep_proc_name 255 exch 			{ 255 div } /exec cvx 3 -1 roll [ 4 1 roll load /exec cvx ] cvx 		] setcolorspace_opt		/TintProc {			255 mul round cvi setcolor		}bdf	}{		MappedCSA 0 get /DeviceCMYK eq 		currentdict/Components known and 		AGMCORE_sep_special not and{			/TintProc [				Components aload pop Name findcmykcustomcolor 				/exch cvx /setcustomcolor cvx			] cvx bdf		}{ 			AGMCORE_host_sep Name (All) eq and{ 				/TintProc { 					1 exch sub setseparationgray 				}bdf 			}{				AGMCORE_in_rip_sep MappedCSA 0 get /DeviceCMYK eq and 				AGMCORE_host_sep or				Name () eq and{					/TintProc [						MappedCSA sep_proc_name exch 0 get /DeviceCMYK eq{							cvx /setcmykcolor cvx						}{							cvx /setgray cvx						}ifelse					] cvx bdf				}{					AGMCORE_producing_seps MappedCSA 0 get dup /DeviceCMYK eq exch /DeviceGray eq or and AGMCORE_sep_special not and{	 					/TintProc [							/dup cvx							MappedCSA sep_proc_name cvx exch							0 get /DeviceGray eq{								1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx							}if							/Name cvx /findcmykcustomcolor cvx /exch cvx														AGMCORE_host_sep{								AGMCORE_is_cmyk_sep							}{								Name inRip_spot_has_ink not							}ifelse							{		 						/pop cvx 1							}if							/setcustomcolor cvx						] cvx bdf 					}{ 						/TintProc /setcolor ldf												[/Separation Name MappedCSA sep_proc_name load ] setcolorspace_opt					}ifelse				}ifelse			}ifelse		}ifelse	}ifelse	set_crd	setsepcolor	end} def/setindexedcolorspace{	dup /indexed_colorspace_dict exch AGMCORE_gput	begin		/MappedCSA CSA map_csa def		AGMCORE_host_sep level2 not and{			0 0 0 0 setcmykcolor		}{			[/Indexed MappedCSA 			level2 not has_color not and{				dup 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or{					pop [/DeviceGray]				}if				HiVal GrayLookup			}{				HiVal 				currentdict/RangeArray known{					{ 						/indexed_colorspace_dict AGMCORE_gget begin						Lookup exch 						dup HiVal gt{							pop HiVal						}if						NComponents mul NComponents getinterval {} forall						NComponents 1 sub -1 0{							RangeArray exch 2 mul 2 getinterval aload pop map255_to_range							NComponents 1 roll						}for						end					} bind				}{					Lookup				}ifelse			}ifelse			] setcolorspace_opt						set_crd		}ifelse	end}def/setindexedcolor{	AGMCORE_host_sep{		/indexed_colorspace_dict AGMCORE_gget/Lookup get 4 3 -1 roll map_index setcmykcolor	}{		setcolor	}ifelse} def/ignoreimagedata{	currentoverprint not{		gsave 		dup begin		1 setgray		0 0 ImageMatrix itransform 		Width Height ImageMatrix idtransform rectfill 		end		grestore		}if	consumeimagedata}def/add_csa{	Adobe_AGM_Core begin			/AGMCORE_CSA_cache xput	end}def/map_csa{	dup type /nametype eq{		Adobe_AGM_Core/AGMCORE_CSA_cache get exch get	}if}def/add_csd{	Adobe_AGM_Core begin		/AGMCORE_CSD_cache xput	end}def/get_csd{	dup type /nametype eq{		Adobe_AGM_Core/AGMCORE_CSD_cache get exch get	}if}def/get_csd_by_name{	dup type dup /nametype eq exch /stringtype eq or{		Adobe_AGM_Core begin		/AGMCORE_CSD_Name xdf		AGMCORE_CSD_cache		{			dup /Name get AGMCORE_CSD_Name eq			{				exch pop exit			}{				pop			}ifelse			pop		}forall		end	}if}def/cachepattern_level2{	4 dict begin	/comparebuffer exch def	/holdbuffer exch def	/readbuffer 1024 string def	/LZWFilter holdbuffer /LZWEncode filter def	{		currentfile readbuffer readline not			{pop exit}		if		dup LZWFilter exch writestring		LZWFilter (\n) writestring		comparebuffer eq			{exit}		if	}loop	LZWFilter closefile	end}def/cachepattern_level3{	3 dict begin	/comparebuffer exch def	/readbuffer 1024 string def	/DoEOL false def	{ 		DoEOL			{			(\n)			/DoEOL false def			}			{			currentfile readbuffer readline not				{pop ()}				{				dup length 0 eq					{ pop(\n)}					{					dup comparebuffer eq						{pop ()}						{/DoEOL true def}					ifelse					}				ifelse				}			ifelse			}		ifelse	} /ReusableStreamDecode filter	end}def/add_pattern{	Adobe_AGM_Core begin		/AGMCORE_pattern_cache xput	end}def/get_pattern{	dup type /nametype eq{		Adobe_AGM_Core/AGMCORE_pattern_cache get exch get	}if}def/make_pattern{	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform	exch 3 index /XStep get 1 index exch 2 copy div cvi mul sub sub	exch 3 index /YStep get 1 index exch 2 copy div cvi mul sub sub	matrix translate exch matrix concatmatrix	makepattern}def/exec_file	statusdict /currentfilenameextend known{		{			0 () /SubFileDecode filter cvx exec		}	}{				{cvx exec}	}ifelsedef/set_pattern{	dup /PatternType get 1 eq{		dup /PaintType get 1 eq{			false sop [/DeviceGray] setcolorspace 0 setgray		}if	}if	setpattern}def/setcolorspace_opt{	dup currentcolorspace eq{		pop	}{		setcolorspace	}ifelse}def/updatecolorrendering{		currentcolorrendering/Intent known{		currentcolorrendering/Intent get	}{		null	}ifelse		Intent ne{		false  		Intent		AGMCORE_CRD_cache {			exch pop 			begin				dup Intent eq{					currentdict setcolorrendering_opt					end 					exch pop true exch						exit				}if			end		} forall		pop		not{			systemdict /findcolorrendering known{				Intent findcolorrendering pop				/ColorRendering findresource 				dup length dict copy				setcolorrendering_opt			}if		}if	}if} def/add_crd{	AGMCORE_CRD_cache 3 1 roll put}def/set_crd{	AGMCORE_host_sep not level2 and{		currentdict/CRD known{			AGMCORE_CRD_cache CRD get dup null ne{				setcolorrendering_opt			}{				pop			}ifelse		}{			currentdict/Intent known{				updatecolorrendering			}if		}ifelse	}if}def/setcolorrendering_opt{	dup currentcolorrendering eq{		pop	}{		begin			/Intent Intent def			currentdict		end		setcolorrendering	}ifelse}def/cdndf{	exch dup currentdict exch known{		pop pop	}{		exch def	}ifelse}def/cpaint_gcomp{	convert_to_process Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf	Adobe_AGM_Core/AGMCORE_ConvertToProcess get not	{		(%end_cpaint_gcomp) flushinput	}if}def/cpaint_gsep{	Adobe_AGM_Core/AGMCORE_ConvertToProcess get	{			(%end_cpaint_gsep) flushinput	}if}def/cpaint_gend{	newpath}def/AGMCORE_ctm_stack bdict	/push_ctm {		stack length size le{			stack dup length 2 mul array 			dup /stack exch def			copy pop		}if		stack size 3 -1 roll put		/size size 1 add def	}	/pop_ctm {		/size size 1 sub def		size 0 lt{ 			/size 0 def		}if		stack size get	}	/stack 1 array	/size 0 edict def/save_ctm{	matrix currentmatrix AGMCORE_ctm_stack begin 		push_ctm 	end}def/restore_ctm{	AGMCORE_ctm_stack begin		pop_ctm 	end	setmatrix}def/path_rez{	dup 0 ne{		AGMCORE_deviceDPI exch div 		dup 1 lt{			pop 1		}if		setflat	}{		pop	}ifelse 	}def/rdcmntline {	currentfile AGMCORE_str256 readline pop	(%) anchorsearch {pop} if} def/set_spot_alias_ary{	/AGMCORE_SpotAliasAry where{		pop pop	}{		Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf		true set_spot_alias	}ifelse}def/set_spot_alias{	/AGMCORE_SpotAliasAry where{		/AGMCORE_current_spot_alias 3 -1 roll put	}{		pop	}ifelse}def/current_spot_alias{	/AGMCORE_SpotAliasAry where{		/AGMCORE_current_spot_alias get	}{		false	}ifelse}def/map_alias{	/AGMCORE_SpotAliasAry where{		begin			/AGMCORE_name xdf			false				AGMCORE_SpotAliasAry{				dup/Name get AGMCORE_name eq{					save exch					/Adobe_AGM_Core currentdict def					/CSD get get_csd					exch restore					exch pop true					exit				}{					pop				}ifelse			}forall		end	}{		pop false	}ifelse}bdf/spot_alias{	true set_spot_alias		/AGMCORE_&setcustomcolor AGMCORE_key_known not {		Adobe_AGM_Core/AGMCORE_&setcustomcolor /setcustomcolor load put	} if	/customcolor_tint 1 AGMCORE_gput		Adobe_AGM_Core begin	/setcustomcolor	{				dup /customcolor_tint exch AGMCORE_gput				current_spot_alias{			1 index 4 get map_alias{				mark 3 1 roll				setsepcolorspace				counttomark 0 ne{					setsepcolor				}if				pop				pop			}{				AGMCORE_&setcustomcolor			}ifelse		}{			AGMCORE_&setcustomcolor		}ifelse	}bdf	end}def/begin_feature{	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if}def/end_feature{	2 dict begin	/spd /setpagedevice load def	/setpagedevice { get_gstate spd set_gstate } def	stopped{$error/newerror false put}if	end	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if}def/set_negative{	Adobe_AGM_Core begin	/AGMCORE_inverting exch def	level2{		currentpagedevice/NegativePrint known{			currentpagedevice/NegativePrint get Adobe_AGM_Core/AGMCORE_inverting get ne{				true begin_feature true{						bdict /NegativePrint Adobe_AGM_Core/AGMCORE_inverting get edict setpagedevice				}end_feature			}if			/AGMCORE_inverting false def		}if	}if	AGMCORE_inverting{		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer		gsave newpath clippath 1 /setseparationgray where{pop setseparationgray}{setgray}ifelse 		fill grestore	}if	end}def/lw_save_restore_override {	/md where {		pop		md begin		currentdict /lw_initializepage known not			{			/lw_initializepage /initializepage load def			/initializepage				{				lw_initializepage				/initializepage {} def				}def			}if		/pmSVsetup{} def		/endp{}def		/pse{}def		/psb{}def		/orig_showpage where			{pop}			{/orig_showpage /showpage load def}		ifelse		/showpage {orig_showpage gR} def		end	}if}def/pscript_showpage_override {	/NTPSOct95 where	{		begin		showpage		save		/showpage /restore load def		/restore {exch pop}def		end	}if}def/driver_media_override{	/md where {		pop		md /initializepage known {			md /initializepage {} put		} if		md /rC known {			md /rC {4{pop}repeat} put		} if	}if		Adobe_AGM_Core /AGMCORE_Default_CTM matrix currentmatrix put}def/driver_check_media_override{	Adobe_AGM_Core /AGMCORE_Default_CTM get matrix currentmatrix ne	{		Adobe_AGM_Core /AGMCORE_Default_CTM get setmatrix	}if}defAGMCORE_err_strings begin	/AGMCORE_bad_environ (Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. ) def	/AGMCORE_color_space_onhost_seps (This job contains colors that will not separate with on-host methods. ) def	/AGMCORE_invalid_color_space (This job contains an invalid color space. ) defendendsystemdict /setpacking known{	setpacking} if%%EndResource%%BeginResource: procset Adobe_CoolType_Core 2.12 0%%Copyright: Copyright 1997-2001 Adobe Systems Incorporated.  All Rights Reserved.%%Version: 2.12 0userdict/Adobe_CoolType_Core 60 dict dup begin put/Level2? systemdict/languagelevel known dup{pop systemdict/languagelevel get 2 ge}if def Level2?not{/currentglobal false def/setglobal/pop load def/gcheck{pop false}bind def/currentpacking false def/setpacking/pop load def/SharedFontDirectory 0 dictdef}if currentpacking true setpacking/@_SaveStackLevels{Adobe_CoolType_Databegin @opStackCountByLevel @opStackLevel 2 copy known not{2 copy 3 dict dup/args 7 index 5 add array put put get}{get dup/args get dup length 3 index lt{dup length 5 add array exch 1 index exch 0 exch putinterval 1 index exch/argsexch put}{pop}ifelse}ifelse begin count 2 sub 1 index lt{pop count 1 sub}ifdup/argCount exch def dup 0 gt{exch 1 index 2 add 1 roll args exch 0 exchgetinterval astore pop}{pop}ifelse count 1 sub/restCount exch def end/@opStackLevel @opStackLevel 1 add def countdictstack 1 sub@dictStackCountByLevel exch @dictStackLevel exch put/@dictStackLevel@dictStackLevel 1 add def end}bind def/@_RestoreStackLevels{Adobe_CoolType_Data begin/@opStackLevel @opStackLevel 1 sub def@opStackCountByLevel @opStackLevel get begin count restCount sub dup 0 gt{{pop}repeat}{pop}ifelse args 0 argCount getinterval{}forall end/@dictStackLevel@dictStackLevel 1 sub def @dictStackCountByLevel @dictStackLevel get endcountdictstack exch sub dup 0 gt{{end}repeat}{pop}ifelse}bind def/@_PopStackLevels{Adobe_CoolType_Data begin/@opStackLevel @opStackLevel 1 subdef/@dictStackLevel @dictStackLevel 1 sub def end}bind def/@Raise{exch cvxexch errordict exch get exec stop}bind def/@ReRaise{cvx $error/errorname geterrordict exch get exec stop}bind def/@Stopped{0 @#Stopped}bind def/@#Stopped{@_SaveStackLevels stopped{@_RestoreStackLevels true}{@_PopStackLevels false}ifelse}bind def/@Arg{Adobe_CoolType_Data begin @opStackCountByLevel@opStackLevel 1 sub get/args get exch get end}bind def/doc_setup{Adobe_CoolType_Core begin/mov/moveto load def/nfnt/newencodedfont load def/mfnt/makefont load def/sfnt/setfont load def/ufnt/undefinefont load def/chp/charpath load def/awsh/awidthshow load def/wsh/widthshow load def/ash/ashowload def/sh/show load def end userdict/Adobe_CoolType_Data 6 dict dup begin/AddWidths? false def/CC 0 def/charcode 2 string def/@opStackCountByLevel 32dict def/@opStackLevel 0 def/@dictStackCountByLevel 32 dict def/@dictStackLevel 0 def end put}bind def/doc_trailer{currentdictAdobe_CoolType_Core eq{end}if}bind def/page_setup{Adobe_CoolType_Core begin}bind def/page_trailer{end}bind def/unload{systemdict/languagelevel known{systemdict/languagelevel get 2 ge{userdict/Adobe_CoolType_Core 2 copy known{undef}{pop pop}ifelse}if}if}bind def/ndf{1 index where{pop pop pop}{dup xcheck{bind}if def}ifelse}def/findfont dup systemdict begin userdict begin/globaldict where{/globaldict get begin}if dup where pop exch get/globaldictwhere{pop end}if end end def/systemfindfont/findfont load def/undefinefont{pop}ndf/copyfont{currentglobal 3 1 roll 1 index gcheck setglobal dup null eq{0}{dup length}ifelse 2 index length add 1 add dict begin exch{1 index/FID eq{poppop}{def}ifelse}forall dup null eq{pop}{{def}forall}ifelse currentdict endexch setglobal}bind def/copyarray{currentglobal exch dup gcheck setglobal duplength array copy exch setglobal}bind def/newencodedfont{currentglobal{SharedFontDirectory 3 index known{SharedFontDirectory 3 index get/FontReferenced known}{false}ifelse}{FontDirectory 3 index known{FontDirectory3 index get/FontReferenced known}{SharedFontDirectory 3 index known{SharedFontDirectory 3 index get/FontReferenced known}{false}ifelse}ifelse}ifelse dup{3 index findfont/FontReferenced get 2 index findfont ne{pop false}if}if{pop 1 index findfont/Encoding get exch 0 1 255{2 copy get 3 index 3 1roll put}for pop pop pop}{findfont dup dup maxlength 2 add dict begin exch{1index/FID ne{def}{pop pop}ifelse}forall/FontReferenced exch def/Encoding exchdup length array copy def/FontName 1 index dup type/stringtype eq{cvn}if defcurrentdict end definefont pop}ifelse}bind def/SetSubstituteStrategy{$SubstituteFont begin dup type/dicttype ne{0 dict}if currentdict/$Strategiesknown{exch $Strategies exch 2 copy known{get 2 copy maxlength exch maxlengthadd dict begin{def}forall{def}forall currentdict dup/$Init known{dup/$Init getexec}if end/$Strategy exch def}{pop pop pop}ifelse}{pop pop}ifelse end}binddef/scff{$SubstituteFont begin dup type/stringtype eq{dup length exch}{null}ifelse/$sname exch def/$slen exch def end{findfont}@Stopped{dup length dup 21add string dup 4 3 roll 0 exch 128 string cvs putinterval exch 1 index exch(_was-malformed-so-was)putinterval cvn{findfont}@Stopped{pop/Courier findfont}if}if $SubstituteFont begin/$sname null def/$slen 0 def end}bind def/isWidthsOnlyFont{dup/WidthsOnly known{pop pop true}{dup/FDepVector known{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}{dup/FDArray known{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}{pop}ifelse}ifelse}ifelse}bind def/?set{$SubstituteFont begin/$substituteFound false def/$fontname 4index def/$doSmartSub false def end 3 index findfont $SubstituteFont begin$substituteFound{false}{dup/FontName known{dup/FontName get $fontname eq 1index/DistillerFauxFont known not and/currentdistillerparams where{pop false 2index isWidthsOnlyFont not and}if}{false}ifelse}ifelse exch pop/$doSmartSubtrue def end{exch pop exch pop exch 2 dict dup/Found 3 index put exch findfontexch}{exch exec exch findfont 2 dict dup/Downloaded 6 5 roll put}ifelse dup/FontName 4 index put copyfont definefont pop}bind def/?str1 256 string def/?str2 256 string def/?add{1 index type/integertype eq{exch true 4 2}{false 31}ifelse roll 1 index findfont dup/Widths known{Adobe_CoolType_Data/AddWidths?true put gsave dup 1000 scalefont setfont}if/Downloaded known{exec exch{exch?str2 cvs exch findfont/Downloaded get 1 dict begin/Downloaded 1 index def?str1 cvs length ?str1 1 index 1 add 3 index putinterval exch length 1 add 1index add ?str1 2 index(*)putinterval ?str1 0 2 index getinterval cvn findfont?str1 3 index(+)putinterval 2 dict dup/FontName ?str1 0 6 index getintervalcvn put dup/Downloaded Downloaded put end copyfont dup/FontName get exchdefinefont pop pop pop}{pop}ifelse}{pop exch{findfont dup/Found get dup lengthexch ?str1 cvs pop ?str1 1 index(+)putinterval ?str1 1 index 1 add 4 index?str2 cvs putinterval ?str1 exch 0 exch 5 4 roll ?str2 cvs length 1 add addgetinterval cvn 1 dict exch 1 index exch/FontName exch put copyfont dup/FontName get exch definefont pop}{pop}ifelse}ifelse Adobe_CoolType_Data/AddWidths? get{grestore Adobe_CoolType_Data/AddWidths? false put}if}bind def/?sh{currentfont/Downloaded known{exch}if pop}bind def/?chp{currentfont/Downloaded known{pop}{false chp}ifelse}bind def/?mv{currentfont/Downloadedknown{moveto pop pop}{pop pop moveto}ifelse}bind def setpacking userdict/$SubstituteFont 25 dict put 1 dict begin/SubstituteFont dup $error exch 2copy known{get}{pop pop{pop/Courier}bind}ifelse def/currentdistillerparamswhere dup{pop pop currentdistillerparams/CannotEmbedFontPolicy 2 copy known{get/Error eq}{pop pop false}ifelse}if not{countdictstack array dictstack 0 getbegin userdict begin $SubstituteFont begin/$str 128 string def/$fontpat 128string def/$slen 0 def/$sname null def/$match false def/$fontname null def/$substituteFound false def/$doSmartSub true def/$depth 0 def/$fontname nulldef/$italicangle 26.5 def/$dstack null def/$Strategies 10 dict dup begin/$Type3Underprint{currentglobal exch false setglobal 11 dict begin/UseFontexch $WMode 0 ne{dup length dict copy dup/WMode $WMode put/UseFont exchdefinefont}if def/FontName $fontname dup type/stringtype eq{cvn}if def/FontType 3 def/FontMatrix[.001 0 0 .001 0 0]def/Encoding 256 array dup 0 1255{/.notdef put dup}for pop def/FontBBox[0 0 0 0]def/CCInfo 7 dict dup begin/cc null def/x 0 def/y 0 def end def/BuildChar{exch begin CCInfo begin 1string dup 0 3 index put exch pop/cc exch def UseFont 1000 scalefont setfontcc stringwidth/y exch def/x exch def x y setcharwidth $SubstituteFont/$Strategy get/$Underprint get exec 0 0 moveto cc show x y moveto end end}binddef currentdict end exch setglobal}bind def/$GetaTint 2 dict dup begin/$BuildFont{dup/WMode known{dup/WMode get}{0}ifelse/$WMode exch def $fontnameexch dup/FontName known{dup/FontName get dup type/stringtype eq{cvn}if}{/unnamedfont}ifelse exch $deepcopyfont exch 1 index exch/FontBasedOn exch putdup/FontName $fontname dup type/stringtype eq{cvn}if put definefont}bind def/$Underprint{gsave x abs y abs gt{/y 1000 def}{/x -1000 def 500 120 translate}ifelse Level2?{[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]setcolorspace}{0setgray}ifelse 10 setlinewidth x .8 mul[7 3]{y mul 8 div 120 sub x 10 div exchmoveto 0 y 4 div neg rlineto dup 0 rlineto 0 y 4 div rlineto closepath gsaveLevel2?{.2 setcolor}{.8 setgray}ifelse fill grestore stroke}forall popgrestore}bind def end def/$Oblique 1 dict dup begin/$BuildFont{currentglobalexch dup gcheck setglobal null copyfont begin/FontBasedOn currentdict/FontNameknown{FontName dup type/stringtype eq{cvn}if}{/unnamedfont}ifelse def/FontName$fontname dup type/stringtype eq{cvn}if def/currentdistillerparams where{pop}{/FontInfo currentdict/FontInfo known{FontInfo null copyfont}{2 dict}ifelse dupbegin/ItalicAngle $italicangle def/FontMatrix FontMatrix[1 0 ItalicAngle dupsin exch cos div 1 0 0]matrix concatmatrix readonly end 4 2 roll def def}ifelse FontName currentdict end definefont exch setglobal}bind def end def/$None 1 dict dup begin/$BuildFont{}bind def end def end def/$ObliqueSetSubstituteStrategy/$findfontByEnum{dup type/stringtype eq{cvn}if dup/$fontname exch def $sname null eq{$str cvs dup length $slen sub $slengetinterval}{pop $sname}ifelse $fontpat dup 0(fonts/*)putinterval exch 7 exchputinterval/$match false def $SubstituteFont/$dstack countdictstack arraydictstack put mark{$fontpat 0 $slen 7 add getinterval{/$match exch def exit}$str filenameforall}stopped{cleardictstack currentdict true $SubstituteFont/$dstack get{exch{1 index eq{pop false}{true}ifelse}{begin false}ifelse}forallpop}if cleartomark/$slen 0 def $match false ne{$match(fonts/)anchorsearch poppop cvn}{/Courier}ifelse}bind def/$ROS 1 dict dup begin/Adobe 4 dict dup begin/Japan1[/Ryumin-Light/HeiseiMin-W3/GothicBBB-Medium/HeiseiKakuGo-W5/HeiseiMaruGo-W4/Jun101-Light]def/Korea1[/HYSMyeongJo-Medium/HYGoThic-Medium]def/GB1[/STSong-Light/STHeiti-Regular]def/CNS1[/MKai-Medium/MHei-Medium]defend def end def/$cmapname null def/$deepcopyfont{dup/FontType get 0 eq{1 dictdup/FontName/copied put copyfont begin/FDepVector FDepVector copyarray 0 1 2index length 1 sub{2 copy get $deepcopyfont dup/FontName/copied put/copiedexch definefont 3 copy put pop pop}for def currentdict end}{$Strategies/$Type3Underprint get exec}ifelse}bind def/$buildfontname{length $str 1 index(-)putinterval 1 add $str 1 index $cmapname $fontpat cvs putinterval $cmapnamelength add $str exch 0 exch getinterval cvn}bind def/$findfontByROS{/$fontnameexch def $ROS Registry 2 copy known{get Ordering 2 copy known{get}{pop pop[]}ifelse}{pop pop[]}ifelse false exch{dup/CIDFont resourcestatus{pop pop save 1index/CIDFont findresource dup/WidthsOnly known{dup/WidthsOnly get}{false}ifelse exch pop exch restore{pop}{exch pop true exit}ifelse}{pop}ifelse}forall{$str cvs $buildfontname}{false(*){save exch dup/CIDFont findresource dup/WidthsOnly known{dup/WidthsOnly get not}{true}ifelse exch/CIDSystemInfo getdup/Registry get Registry eq exch/Ordering get Ordering eq and and{exchrestore exch pop true exit}{pop restore}ifelse}$str/CIDFont resourceforall{$buildfontname}{$fontname $findfontByEnum}ifelse}ifelse}bind def end endcurrentdict/$error known currentdict/languagelevel known and dup{pop $error/SubstituteFont known}if dup{$error}{Adobe_CoolType_Core}ifelse begin{/SubstituteFont/CMap/Category resourcestatus{pop pop{$SubstituteFont begin/$substituteFound true def dup length $slen gt $sname null ne or $slen 0 gtand{$sname null eq{dup $str cvs dup length $slen sub $slen getinterval cvn}{$sname}ifelse dup/CMap resourcestatus{pop pop dup/$cmapname exch def/CMapfindresource/CIDSystemInfo get{def}forall $findfontByROS}{128 string cvs dup(-)search{3 1 roll search{3 1 roll pop{dup cvi}stopped{pop pop pop pop pop$findfontByEnum}{4 2 roll pop pop exch length exch 2 index length 2 index subexch 1 sub -1 0{$str cvs dup length 4 index 0 4 index 4 3 roll add getintervalexch 1 index exch 3 index exch putinterval dup/CMap resourcestatus{pop pop 4 1roll pop pop pop dup/$cmapname exch def/CMap findresource/CIDSystemInfo get{def}forall $findfontByROS true exit}{pop}ifelse}for dup type/booleantype eq{pop}{pop pop $findfontByEnum}ifelse}ifelse}{pop pop pop $findfontByEnum}ifelse}{pop pop $findfontByEnum}ifelse}ifelse}{//SubstituteFont exec}ifelse/$slen 0def end}}{{$SubstituteFont begin/$substituteFound true def dup length $slen gt$sname null ne or $slen 0 gt and{$findfontByEnum}{//SubstituteFont exec}ifelseend}}ifelse bind readonly def Adobe_CoolType_Core/scfindfont/systemfindfontload put}{/scfindfont{$SubstituteFont begin dup systemfindfont dup/FontNameknown{dup/FontName get dup 3 index ne}{/noname true}ifelse dup{/$origfontnamefound 2 index def/$origfontname 4 index def/$substituteFoundtrue def}if exch pop{$slen 0 gt $sname null ne 3 index length $slen gt or and{pop dup $findfontByEnum findfont dup maxlength 1 add dict begin{1 index/FID eq{pop pop}{def}ifelse}forall currentdict end definefont dup/FontName known{dup/FontName get}{null}ifelse $origfontnamefound ne{$origfontname $str cvs print( substitution revised, using )print dup/FontName known{dup/FontName get}{(unspecified font)}ifelse $str cvs print(.)print}if}{exch pop}ifelse}{exch pop}ifelse end}bind def}ifelse end endAdobe_CoolType_Core/findfont{$SubstituteFont begin $depth 0 eq{/$fontname 1index dup type/stringtype ne{$str cvs}if def/$substituteFound false def}if/$depth $depth 1 add def end scfindfont $SubstituteFont begin/$depth $depth 1sub def $substituteFound $depth 0 eq and $doSmartSub and{currentdict/$Strategyknown{$Strategy/$BuildFont get exec}if}if end}bind put}if end end%%EndResource%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.13 0%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated.%%Version: 1.13 0systemdict/languagelevel known dup{currentglobal false setglobal}{false}ifelseexch userdict/Adobe_CoolType_Utility 2 copy known{2 copy get dup maxlength 25add dict copy}{25 dict}ifelse put Adobe_CoolType_Utility begin/ct_Level2? exchdef/ct_Clone? 1183615869 internaldict dup/CCRun known not exch/eCCRun knownnot ct_Level2? and or def/ct_UseNativeCapability? systemdict/composefont knowndef/ct_MakeOCF 35 dict def/ct_Vars 25 dict def/ct_GlyphDirProcs 6 dict def/ct_BuildCharDict 15 dict dup begin/charcode 2 string def/dst_string 1500string def/nullstring()def/usewidths? true def end def ct_Level2?{setglobal}{pop}ifelse ct_GlyphDirProcs begin/GetGlyphDirectory{systemdict/languagelevelknown{pop/CIDFont findresource/GlyphDirectory get}{1 index/CIDFontfindresource/GlyphDirectory get dup type/dicttype eq{dup dup maxlength exchlength sub 2 index lt{dup length 2 index add dict copy 2 index/CIDFontfindresource/GlyphDirectory 2 index put}if}if exch pop exch pop}ifelse +}def/+{systemdict/languagelevel known{currentglobal false setglobal 3 dict begin/vmexch def}{1 dict begin}ifelse/$ exch def systemdict/languagelevel known{vmsetglobal/gvm currentglobal def $ gcheck setglobal}if ?{$ begin}if}def/?{$type/dicttype eq}def/|{userdict/Adobe_CoolType_Data known{Adobe_CoolType_Data/AddWidths? known{currentdict Adobe_CoolType_Data begin begin AddWidths?{Adobe_CoolType_Data/CC 3 index put ?{def}{$ 3 1 roll put}ifelse CC charcodeexch 1 index 0 2 index 256 idiv put 1 index exch 1 exch 256 mod putstringwidth 2 array astore currentfont/Widths get exch CC exch put}{?{def}{$ 31 roll put}ifelse}ifelse end end}{?{def}{$ 3 1 roll put}ifelse}ifelse}{?{def}{$ 3 1 roll put}ifelse}ifelse}def/!{?{end}if systemdict/languagelevel known{gvmsetglobal}if end}def/:{string currentfile exch readstring pop}executeonly defend ct_MakeOCF begin/ct_cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_CID_STR_SIZE 8000 def/ct_mkocfStr100 100 string def/ct_defaultFontMtx[.0010 0 .001 0 0]def/ct_1000Mtx[1000 0 0 1000 0 0]def/ct_raise{exch cvx excherrordict exch get exec stop}bind def/ct_reraise{cvx $error/errorname get(Error: )print dup(                    )cvs print errordict exch get exec stop}bind def/ct_cvnsi{1 index add 1 sub 1 exch 0 4 1 roll{2 index exch get exch 8bitshift add}for exch pop}bind def/ct_GetInterval{Adobe_CoolType_Utility/ct_BuildCharDict get begin/dst_index 0 def dup dst_string length gt{dupstring/dst_string exch def}if 1 index ct_CID_STR_SIZE idiv/arrayIndex exch def2 index arrayIndex get 2 index arrayIndex ct_CID_STR_SIZE mul sub{dup 3 indexadd 2 index length le{2 index getinterval dst_string dst_index 2 indexputinterval length dst_index add/dst_index exch def exit}{1 index length 1index sub dup 4 1 roll getinterval dst_string dst_index 2 index putintervalpop dup dst_index add/dst_index exch def sub/arrayIndex arrayIndex 1 add def 2index dup length arrayIndex gt{arrayIndex get}{pop exit}ifelse 0}ifelse}looppop pop pop dst_string 0 dst_index getinterval end}bind def ct_Level2?{/ct_resourcestatus currentglobal mark true setglobal{/unknowninstancename/Category resourcestatus}stopped{cleartomark setglobal true}{cleartomarkcurrentglobal not exch setglobal}ifelse{{mark 3 1 roll/Category findresourcebegin ct_Vars/vm currentglobal put({ResourceStatus} stopped)0()/SubFileDecodefilter cvx exec{cleartomark false}{{3 2 roll pop true}{cleartomark false}ifelse}ifelse ct_Vars/vm get setglobal end}}{{resourcestatus}}ifelse bind def/CIDFont/Category ct_resourcestatus{pop pop}{currentglobal true setglobal/Generic/Category findresource dup length dict copy dup/InstanceType/dicttypeput/CIDFont exch/Category defineresource pop setglobal}ifelsect_UseNativeCapability?{/CIDInit/ProcSet findresource begin 12 dict beginbegincmap/CIDSystemInfo 3 dict dup begin/Registry(Adobe)def/Ordering(Identity)def/Supplement 0 def end def/CMapName/Identity-H def/CMapVersion 1 def/CMapType 1 def 1 begincodespacerange<0000><ffff>endcodespacerange 1begincidrange<0000><ffff>0 endcidrange endcmap CMapName currentdict/CMapdefineresource pop end end}if}{/ct_Category 2 dict begin/CIDFont 10 dict def/ProcSet 2 dict def currentdict end def/defineresource{ct_Category 1 index 2copy known{get dup dup maxlength exch length eq{dup length 10 add dict copyct_Category 2 index 2 index put}if 3 index 3 index put pop exch pop}{pop pop/defineresource/undefined ct_raise}ifelse}bind def/findresource{ct_Category 1index 2 copy known{get 2 index 2 copy known{get 3 1 roll pop pop}{pop pop/findresource/undefinedresource ct_raise}ifelse}{pop pop/findresource/undefined ct_raise}ifelse}bind def/resourcestatus{ct_Category 1 index 2 copyknown{get 2 index known exch pop exch pop{0 -1 true}{false}ifelse}{pop pop/findresource/undefined ct_raise}ifelse}bind def/ct_resourcestatus/resourcestatus load def}ifelse/ct_CIDInit 2 dict begin/ct_cidfont_stream_init{{dup(Binary)eq{pop null currentfile ct_Level2?{{cid_BYTE_COUNT()/SubFileDecode filter}stopped{pop pop pop}if}if/readstring load exit}if dup(Hex)eq{pop currentfile ct_Level2?{{null exch/ASCIIHexDecode filter/readstring}stopped{pop exch pop(>)exch/readhexstring}if}{(>)exch/readhexstring}ifelseload exit}if/StartData/typecheck ct_raise}loop cid_BYTE_COUNT ct_CID_STR_SIZEle{2 copy cid_BYTE_COUNT string exch exec pop 1 array dup 3 -1 roll 0 exch put}{cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi dup array exch 2 sub 0 exch 1exch{2 copy 5 index ct_CID_STR_SIZE string 6 index exec pop put pop}for 2index cid_BYTE_COUNT ct_CID_STR_SIZE mod string 3 index exec pop 1 index exch1 index length 1 sub exch put}ifelse cid_CIDFONT exch/GlyphData exch put 2index null eq{pop pop pop}{pop/readstring load 1 string exch{3 copy exec popdup length 0 eq{pop pop pop pop pop true exit}if 4 index eq{pop pop pop popfalse exit}if}loop pop}ifelse}bind def/StartData{mark{currentdict dup/FDArrayget 0 get/FontMatrix get 0 get .001 eq{dup/CDevProc known not{/CDevProc1183615869 internaldict/stdCDevProc 2 copy known{get}{pop pop{pop pop pop poppop 0 -1000 7 index 2 div 880}}ifelse def}if}{/CDevProc{pop pop pop pop pop 01 cid_temp/cid_CIDFONT get/FDArray get 0 get/FontMatrix get 0 get div 7 index2 div 1 index .88 mul}def}ifelse/cid_temp 15 dict def cid_temp begin/cid_CIDFONT exch def 3 copy pop dup/cid_BYTE_COUNT exch def 0 gt{ct_cidfont_stream_init FDArray{/Private get dup/SubrMapOffset known{begin/Subrs SubrCount array def Subrs SubrMapOffset SubrCount SDBytes ct_Level2?{currentdict dup/SubrMapOffset undef dup/SubrCount undef/SDBytes undef}if end/cid_SD_BYTES exch def/cid_SUBR_COUNT exch def/cid_SUBR_MAP_OFFSET exch def/cid_SUBRS exch def cid_SUBR_COUNT 0 gt{GlyphData cid_SUBR_MAP_OFFSETcid_SD_BYTES ct_GetInterval 0 cid_SD_BYTES ct_cvnsi 0 1 cid_SUBR_COUNT 1 sub{exch 1 index 1 add cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add GlyphData exchcid_SD_BYTES ct_GetInterval 0 cid_SD_BYTES ct_cvnsi cid_SUBRS 4 2 rollGlyphData exch 4 index 1 index sub ct_GetInterval dup length string copy put}for pop}if}{pop}ifelse}forall}if cleartomark pop pop end CIDFontNamecurrentdict/CIDFont defineresource pop end end}stopped{cleartomark/StartDatact_reraise}if}bind def currentdict end def/ct_saveCIDInit{/CIDInit/ProcSetct_resourcestatus{true}{/CIDInitC/ProcSet ct_resourcestatus}ifelse{pop pop/CIDInit/ProcSet findresource ct_UseNativeCapability?{pop null}{/CIDInitct_CIDInit/ProcSet defineresource pop}ifelse}{/CIDInit ct_CIDInit/ProcSetdefineresource pop null}ifelse ct_Vars exch/ct_oldCIDInit exch put}bind def/ct_restoreCIDInit{ct_Vars/ct_oldCIDInit get dup null ne{/CIDInit exch/ProcSetdefineresource pop}{pop}ifelse}bind def/ct_BuildCharSetUp{1 index beginCIDFont begin Adobe_CoolType_Utility/ct_BuildCharDict get begin/ct_dfCharCodeexch def/ct_dfDict exch def CIDFirstByte ct_dfCharCode add dup CIDCount ge{pop0}if/cid exch def{GlyphDirectory cid 2 copy known{get}{pop pop nullstring}ifelse dup length FDBytes sub 0 gt{dup FDBytes 0 ne{0 FDBytes ct_cvnsi}{pop 0}ifelse/fdIndex exch def dup length FDBytes sub FDBytes exch getinterval/charstring exch def exit}{pop cid 0 eq{/charstring nullstring def exit}if/cid0 def}ifelse}loop}def/ct_SetCacheDevice{0 0 moveto dup stringwidth 3 -1 rolltrue charpath pathbbox 0 -1000 7 index 2 div 880 setcachedevice2 0 0 moveto}def/ct_CloneSetCacheProc{1 eq{stringwidth pop -2 div -880 0 -1000 setcharwidthmoveto}{usewidths?{currentfont/Widths get cid 2 copy known{get exch pop aloadpop}{pop pop stringwidth}ifelse}{stringwidth}ifelse setcharwidth 0 0 moveto}ifelse}def/ct_Type3ShowCharString{ct_FDDict fdIndex 2 copy known{get}{currentglobal 3 1 roll 1 index gcheck setglobal ct_Type1FontTemplate dupmaxlength dict copy begin FDArray fdIndex get dup/FontMatrix 2 copy known{get}{pop pop ct_defaultFontMtx}ifelse/FontMatrix exch dup length array copy def/Private get/Private exch def/Widths rootfont/Widths get def/CharStrings 1dict dup/.notdef<d841272cf18f54fc13>dup length string copy put def currentdictend/ct_Type1Font exch definefont dup 5 1 roll put setglobal}ifelse dup/CharStrings get 1 index/Encoding get ct_dfCharCode get charstring putrootfont/WMode 2 copy known{get}{pop pop 0}ifelse exch 1000 scalefont setfontct_str1 0 ct_dfCharCode put ct_str1 exch ct_dfSetCacheProc ct_SyntheticBold{currentpoint ct_str1 show newpath moveto ct_str1 true charpath ct_StrokeWidthsetlinewidth stroke}{ct_str1 show}ifelse}def/ct_Type4ShowCharString{ct_dfDictct_dfCharCode charstring FDArray fdIndex get dup/FontMatrix get dupct_defaultFontMtx ct_matrixeq not{ct_1000Mtx matrix concatmatrix concat}{pop}ifelse/Private get Adobe_CoolType_Utility/ct_Level2? get not{ct_dfDict/Private3 -1 roll{put}1183615869 internaldict/superexec get exec}if 1183615869internaldict Adobe_CoolType_Utility/ct_Level2? get{1 index}{3 index/Privateget mark 6 1 roll}ifelse dup/RunInt known{/RunInt get}{pop/CCRun}ifelse getexec Adobe_CoolType_Utility/ct_Level2? get not{cleartomark}if}bind def/ct_BuildCharIncremental{{Adobe_CoolType_Utility/ct_MakeOCF get beginct_BuildCharSetUp ct_ShowCharString}stopped{stop}if end end end end}bind def/BaseFontNameStr(BF00)def/ct_Type1FontTemplate 14 dict begin/FontType 1 def/FontMatrix[.001 0 0 .001 0 0]def/FontBBox[-250 -250 1250 1250]def/Encodingct_cHexEncoding def/PaintType 0 def currentdict end def/BaseFontTemplate 11dict begin/FontMatrix[.001 0 0 .001 0 0]def/FontBBox[-250 -250 1250 1250]def/Encoding ct_cHexEncoding def/BuildChar/ct_BuildCharIncremental load defct_Clone?{/FontType 3 def/ct_ShowCharString/ct_Type3ShowCharString load def/ct_dfSetCacheProc/ct_CloneSetCacheProc load def/ct_SyntheticBold false def/ct_StrokeWidth 1 def}{/FontType 4 def/Private 1 dict dup/lenIV 4 put def/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def/PaintType 0 def/ct_ShowCharString/ct_Type4ShowCharString load def}ifelse/ct_str1 1 string defcurrentdict end def/BaseFontDictSize BaseFontTemplate length 5 add def/ct_matrixeq{true 0 1 5{dup 4 index exch get exch 3 index exch get eq and dupnot{exit}if}for exch pop exch pop}bind def/ct_makeocf{15 dict begin exch/WModeexch def exch/FontName exch def/FontType 0 def/FMapType 2 def/FontMatrixmatrix def/bfCount 1 index/CIDCount get 256 idiv 1 add dup 256 gt{pop 256}ifdef/Encoding 256 array 0 1 bfCount 1 sub{2 copy dup put pop}for bfCount 1 255{2 copy bfCount put pop}for def/FDepVector bfCount dup 256 lt{1 add}if arraydef BaseFontTemplate BaseFontDictSize dict copy begin/CIDFont exch def CIDFont/FontBBox known{CIDFont/FontBBox get/FontBBox exch def}if CIDFont/CDevProcknown{CIDFont/CDevProc get/CDevProc exch def}if currentdict endBaseFontNameStr 3(0)putinterval 0 1 bfCount dup 256 eq{1 sub}if{FDepVectorexch 2 index BaseFontDictSize dict copy begin dup/CIDFirstByte exch 256 muldef FontType 3 eq{/ct_FDDict 2 dict def}if currentdict end 1 index 16BaseFontNameStr 2 2 getinterval cvrs pop BaseFontNameStr exch definefont put}for ct_Clone?{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}if FontName currentdict end definefont ct_Clone?{gsave dup 1000 scalefontsetfont ct_BuildCharDict begin/usewidths? false def currentfont/Widths getbegin exch/CIDFont get/GlyphDirectory get{pop dup charcode exch 1 index 0 2index 256 idiv put 1 index exch 1 exch 256 mod put stringwidth 2 array astoredef}forall end/usewidths? true def end grestore}{exch pop}ifelse}bind def/ct_ComposeFont{ct_UseNativeCapability?{2 index/CMap ct_resourcestatus{pop popexch pop}{/CIDInit/ProcSet findresource begin 12 dict begin begincmap/CMapName3 index def/CMapVersion 1 def/CMapType 1 def exch/WMode exch def/CIDSystemInfo3 dict dup begin/Registry(Adobe)def/Ordering CMapName ct_mkocfStr100 cvs(Adobe-)search{pop pop(-)search{dup length string copy exch pop exch pop}{pop(Identity)}ifelse}{pop(Identity)}ifelse def/Supplement 0 def end def 1begincodespacerange<0000><ffff>endcodespacerange 1 begincidrange<0000><ffff>0endcidrange endcmap CMapName currentdict/CMap defineresource pop end end}ifelse composefont}{3 2 roll pop 0 get/CIDFont findresource ct_makeocf}ifelse}bind def/ct_MakeIdentity{ct_UseNativeCapability?{1 index/CMapct_resourcestatus{pop pop}{/CIDInit/ProcSet findresource begin 12 dict beginbegincmap/CMapName 2 index def/CMapVersion 1 def/CMapType 1 def/CIDSystemInfo3 dict dup begin/Registry(Adobe)def/Ordering CMapName ct_mkocfStr100 cvs(Adobe-)search{pop pop(-)search{dup length string copy exch pop exch pop}{pop(Identity)}ifelse}{pop(Identity)}ifelse def/Supplement 0 def end def 1begincodespacerange<0000><ffff>endcodespacerange 1 begincidrange<0000><ffff>0endcidrange endcmap CMapName currentdict/CMap defineresource pop end end}ifelse composefont}{exch pop 0 get/CIDFont findresource ct_makeocf}ifelse}binddef currentdict readonly pop end end%%EndResourceAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0%%Version: 1.0 0%%Copyright: Copyright (C) 2000-2000 Adobe Systems, Inc.  All Rights Reserved.systemdict /setpacking known{	currentpacking	true setpacking} ifuserdict /Adobe_AGM_Image 65 dict dup begin put/Adobe_AGM_Image_Id /Adobe_AGM_Image_1.0_0 def/nd{	null def}bind def/AGMIMG_&image nd/AGMIMG_&colorimage nd%%don't initialize AGMIMG_&customcolorimage, it wrecks havoc in a nested environment%%AGMIMG_ccimage_exists not {/AGMIMG_&customcolorimage nd} if /AGMIMG_&imagemask nd/AGMIMG_mbuf () def/AGMIMG_ybuf () def/AGMIMG_kbuf () def/AGMIMG_c 0 def/AGMIMG_m 0 def/AGMIMG_y 0 def/AGMIMG_k 0 def/AGMIMG_tmp nd/AGMIMG_imagestring0 nd/AGMIMG_imagestring1 nd/AGMIMG_imagestring2 nd/AGMIMG_imagestring3 nd/AGMIMG_imagestring4 nd/AGMIMG_imagestring5 nd/AGMIMG_cnt nd/AGMIMG_fsave nd/AGMIMG_colorAry nd/AGMIMG_override nd/AGMIMG_name nd/invert_image_samples nd/knockout_image_samples	nd/img nd/sepimg nd/idximg nd/doc_setup{ 	Adobe_AGM_Core begin	Adobe_AGM_Image begin	/AGMIMG_&image systemdict/image get def	/AGMIMG_&imagemask systemdict/imagemask get def	/colorimage where{		pop		/AGMIMG_&colorimage /colorimage ldf	}if	end	end}def/page_setup{	Adobe_AGM_Image begin	/AGMIMG_ccimage_exists {/customcolorimage where 		{			pop			/Adobe_AGM_OnHost_Seps where			{			pop false			}{			/Adobe_AGM_InRip_Seps where				{				pop false				}{					true				 }ifelse			 }ifelse			}{			false		}ifelse 	}bdf	level2{		/invert_image_samples		{			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf			/Decode [ Decode 1 get Decode 0 get] def		}def		/knockout_image_samples		{			Operator/imagemask ne{				/Decode [1 1] def			}if		}def	}{			/invert_image_samples		{			{1 exch sub} currenttransfer addprocs settransfer		}def		/knockout_image_samples		{			{ pop 1 } currenttransfer addprocs settransfer		}def	}ifelse	/img /imageormask ldf	/sepimg /sep_imageormask ldf	/idximg /indexed_imageormask ldf	currentdict{		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and{			bind		}if		def	}forall}def/page_trailer{	end}def/doc_trailer{}def/imageormask_sys{	begin		save mark		level2{			currentdict			Operator /imagemask eq{				AGMIMG_&imagemask			}{				AGMIMG_&image			}ifelse		}{			Width Height			Operator /imagemask eq{				Decode 0 get 1 eq Decode 1 get 0 eq	and				ImageMatrix /DataSource load				AGMIMG_&imagemask			}{				BitsPerComponent ImageMatrix /DataSource load				AGMIMG_&image			}ifelse		}ifelse		cleartomark restore	end}def/overprint_plate{	currentoverprint{		0 get		dup /DeviceGray eq{			pop AGMCORE_black_plate not		}{			/DeviceCMYK eq{				AGMCORE_is_cmyk_sep not			}if		}ifelse	}{		false	}ifelse}def/imageormask{	begin		SkipImageProc not{			save mark			level2 AGMCORE_host_sep not and{				currentdict				Operator /imagemask eq{					imagemask				}{					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get /DeviceGray eq and{						[/Separation /Black /DeviceGray {}] setcolorspace						/Decode [ Decode 1 get Decode 0 get ] def					}if					image				}ifelse			}{				Width Height				Operator /imagemask eq{					Decode 0 get 1 eq Decode 1 get 0 eq	and					ImageMatrix /DataSource load					AGMCORE_host_sep{						currentgray 1 ne{							currentdict imageormask_sys						}{  	 						currentoverprint not{  			 					1 AGMCORE_&setgray  	 							knockout_image_samples  			 					currentdict imageormask_sys  			 				}{  			 					currentdict ignoreimagedata  			 				}ifelse				 		}ifelse					}{						imagemask					}ifelse				}{					BitsPerComponent ImageMatrix 					MultipleDataSources{						0 1 NComponents 1 sub{							DataSource exch get						}for					}{						/DataSource load					}ifelse					Operator /colorimage eq{						AGMCORE_host_sep{							MultipleDataSources level2 or NComponents 4 eq and{								MultipleDataSources{									4 {pop} repeat									/DataSource [										DataSource 0 get /exec cvx										DataSource 1 get /exec cvx										DataSource 2 get /exec cvx										DataSource 3 get /exec cvx										/AGMCORE_get_ink_data cvx									] cvx def								}{									/DataSource /DataSource load filter_cmyk 0 () /SubFileDecode filter def								}ifelse									/Decode [ Decode 0 get Decode 1 get ] def								/MultipleDataSources false def								/NComponents 1 def								/Operator /image def								AGMCORE_is_cmyk_sep{									currentoverprint InksUsed current_ink not and{										currentdict consumeimagedata									}{										invert_image_samples						 				1 AGMCORE_&setgray										currentdict imageormask_sys									}ifelse								}{										currentdict ignoreimagedata								}ifelse							}{																	MultipleDataSources NComponents AGMIMG_&colorimage													}ifelse						}{							true NComponents colorimage						}ifelse					}{						Operator /image eq{							AGMCORE_host_sep{								/DoImage true def								HostSepColorImage{									invert_image_samples								}{									AGMCORE_black_plate not{										/DoImage false def										currentdict ignoreimagedata					 				}if								}ifelse						 		1 AGMCORE_&setgray								DoImage									{currentdict imageormask_sys} if							}{								image							}ifelse						}{							Operator/knockout eq{								pop pop pop pop pop								currentoverprint InksUsed current_ink not and{								}{									currentcolorspace overprint_plate not{										knockout_unitsq									}if								}ifelse							}if						}ifelse					}ifelse				}ifelse			}ifelse			cleartomark restore		}if	end}def/sep_imageormask{ 	/sep_colorspace_dict AGMCORE_gget begin	/MappedCSA CSA map_csa def	begin	SkipImageProc not{		save mark 			AGMCORE_avoid_L2_sep_space{			/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def		}if 		AGMIMG_ccimage_exists 		MappedCSA 0 get /DeviceCMYK eq and		currentdict/Components known and 		Name () ne and 		Name (All) ne and 		Operator /image eq and		AGMCORE_producing_seps not and		level2 not and		{			Width Height BitsPerComponent ImageMatrix 			[			/DataSource load /exec cvx			{				0 1 2 index length 1 sub{					1 index exch					2 copy get 255 xor put				}for			} /exec cvx			] cvx bind			MappedCSA 0 get /DeviceCMYK eq{				Components aload pop			}{				0 0 0 Components aload pop 1 exch sub			}ifelse			Name findcmykcustomcolor			customcolorimage		}{			AGMCORE_producing_seps not{				level2{					AGMCORE_avoid_L2_sep_space not currentcolorspace 0 get /Separation ne and{						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt						/sep_tint AGMCORE_gget setcolor					}if					currentdict imageormask				}{ 					currentdict					Operator /imagemask eq{						imageormask					}{						sep_imageormask_lev1					}ifelse				}ifelse 			}{				AGMCORE_host_sep{					Operator/knockout eq{						currentoverprint InksUsed current_ink not and{						}{							currentdict/ImageMatrix get concat							knockout_unitsq						}ifelse					}{						currentgray 1 ne{ 							AGMCORE_is_cmyk_sep Name (All) ne and{ 								level2{	 								[ /Separation Name [/DeviceGray]	 								{ 	 									sep_colorspace_proc AGMCORE_get_ink_data										1 exch sub	 								} bind									] AGMCORE_&setcolorspace									/sep_tint AGMCORE_gget AGMCORE_&setcolor 									currentdict imageormask_sys	 							}{	 								currentdict									Operator /imagemask eq{										imageormask_sys									}{										sep_image_lev1_sep									}ifelse	 							}ifelse 							}{ 								Operator/imagemask ne{									invert_image_samples 								}if		 						currentdict imageormask_sys 							}ifelse 						}{							currentdict consumeimagedata  							currentoverprint not Name (All) eq or{								gsave 								knockout_unitsq								grestore		 					}if 						}ifelse		 			}ifelse 				}{					currentcolorspace 0 get /Separation ne{						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt						/sep_tint AGMCORE_gget setcolor					}if					currentoverprint 					MappedCSA 0 get /DeviceCMYK eq and 					Name inRip_spot_has_ink not and 					Name (All) ne and {						imageormask_l2_overprint					}{						currentdict imageormask 					}ifelse				}ifelse			}ifelse		}ifelse		cleartomark restore	}if	end	end}def/imageormask_l2_overprint{		currentdict	currentcmykcolor add add add 0 eq{		currentdict consumeimagedata	}{		level3{ 									currentcmykcolor 			/AGMIMG_k xdf 			/AGMIMG_y xdf 			/AGMIMG_m xdf 			/AGMIMG_c xdf			Operator/imagemask eq{				[/DeviceN [				AGMIMG_c 0 ne {/Cyan} if				AGMIMG_m 0 ne {/Magenta} if				AGMIMG_y 0 ne {/Yellow} if				AGMIMG_k 0 ne {/Black} if				] /DeviceCMYK {}] setcolorspace								AGMIMG_c 0 ne {AGMIMG_c} if				AGMIMG_m 0 ne {AGMIMG_m} if				AGMIMG_y 0 ne {AGMIMG_y} if				AGMIMG_k 0 ne {AGMIMG_k} if				setcolor						}{					/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def				[/Indexed 									[						/DeviceN [							AGMIMG_c 0 ne {/Cyan} if							AGMIMG_m 0 ne {/Magenta} if							AGMIMG_y 0 ne {/Yellow} if							AGMIMG_k 0 ne {/Black} if						] 						/DeviceCMYK {							AGMIMG_k 0 eq {0} if							AGMIMG_y 0 eq {0 exch} if							AGMIMG_m 0 eq {0 3 1 roll} if							AGMIMG_c 0 eq {0 4 1 roll} if												}					]					255					{						255 div 								mark exch						dup	dup dup														AGMIMG_k 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop									counttomark 1 roll						}{							pop						}ifelse													AGMIMG_y 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop									counttomark 1 roll						}{							pop						}ifelse								AGMIMG_m 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop									counttomark 1 roll						}{							pop						}ifelse													AGMIMG_c 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop									counttomark 1 roll						}{							pop						}ifelse						counttomark 1 add -1 roll pop					}				] setcolorspace			}ifelse						imageormask_sys		}{	write_image_file{		currentcmykcolor		0 ne{			[/Separation /Black /DeviceGray {}] setcolorspace			gsave			/Black			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 1 roll pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		}if		0 ne{			[/Separation /Yellow /DeviceGray {}] setcolorspace			gsave			/Yellow			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 2 roll pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		}if		0 ne{			[/Separation /Magenta /DeviceGray {}] setcolorspace			gsave			/Magenta			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 3 roll pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		}if		0 ne{			[/Separation /Cyan /DeviceGray {}] setcolorspace			gsave			/Cyan 			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		} if				close_image_file			}{				imageormask			}ifelse		}ifelse	}ifelse} def/indexed_imageormask{	begin		save mark 	 		currentdict 		AGMCORE_host_sep{ 						Operator/knockout eq{				/indexed_colorspace_dict AGMCORE_gget /CSA get map_csa overprint_plate not{					knockout_unitsq				}if			}{	 			AGMCORE_is_cmyk_sep{					Operator /imagemask eq{						imageormask_sys					}{						level2{							indexed_image_lev2_sep						}{							indexed_image_lev1_sep						}ifelse					}ifelse				}{					currentoverprint not{						knockout_image_samples		 				imageormask_sys		 			}{		 				currentdict consumeimagedata		 			}ifelse				}ifelse			}ifelse 		}{			level2{				imageormask			}{ 				Operator /imagemask eq{					imageormask				}{					indexed_imageormask_lev1				}ifelse			}ifelse 		}ifelse		cleartomark restore	end}def/indexed_image_lev2_sep{	/indexed_colorspace_dict AGMCORE_gget begin	begin				currentcolorspace 		dup 1 /DeviceGray put		dup 3 [			currentcolorspace 3 get 			{				exch 4 mul 4 getinterval {} forall				AGMCORE_get_ink_data 255 div 1 exch sub			} /exec cvx		] cvx put		setcolorspace				currentdict 		Operator /imagemask eq{			AGMIMG_&imagemask		}{			AGMIMG_&image		}ifelse				end end}def/OPIimage{	dup type /dicttype ne{		10 dict begin			/DataSource xdf			/ImageMatrix xdf			/BitsPerComponent xdf			/Height xdf			/Width xdf			/ImageType 1 def			/Decode [0 1 def]			currentdict		end	}if	dup begin		/NComponents 1 cdndf		/MultipleDataSources false cdndf		/SkipImageProc {false} cdndf		/HostSepColorImage false cdndf		/Decode [				0 				currentcolorspace 0 get /Indexed eq{					2 BitsPerComponent exp 1 sub				}{					1				}ifelse		] cdndf		/Operator /image cdndf	end	/sep_colorspace_dict AGMCORE_gget null eq{		imageormask	}{		gsave		dup begin invert_image_samples end		sep_imageormask		grestore	}ifelse}def/spot_alias{	/mapto_sep_imageormask 	{		dup type /dicttype ne{			12 dict begin				/ImageType 1 def				/DataSource xdf				/ImageMatrix xdf				/BitsPerComponent xdf				/Height xdf				/Width xdf				/MultipleDataSources false def		}{			begin		}ifelse				/Decode [/customcolor_tint AGMCORE_gget 0] def				/Operator /image def				/HostSepColorImage false def				/InksUsed [] def				/SkipImageProc {false} def				currentdict 			end		sep_imageormask	}bdf	/customcolorimage	{		Adobe_AGM_Image/AGMIMG_colorAry xddf		/customcolor_tint AGMCORE_gget		bdict			/Name AGMIMG_colorAry 4 get			/CSA [ /DeviceCMYK ] 			/TintMethod /Subtractive			/TintProc null			/MappedCSA null			/NComponents 4 			/Components [ AGMIMG_colorAry aload pop pop ] 		edict		setsepcolorspace		mapto_sep_imageormask	}ndf	Adobe_AGM_Image/AGMIMG_&customcolorimage /customcolorimage load put	/customcolorimage	{		Adobe_AGM_Image/AGMIMG_override false put		dup 4 get map_alias{			/customcolor_tint AGMCORE_gget exch setsepcolorspace			pop			mapto_sep_imageormask		}{			AGMIMG_&customcolorimage		}ifelse				}bdf}deflevel2 not{	/colorbuf	{		0 1 2 index length 1 sub{			dup 2 index exch get 			255 exch sub 			2 index 			3 1 roll 			put		}for	}def	/tint_image_to_color	{		begin			Width Height BitsPerComponent ImageMatrix 			/DataSource load		end		Adobe_AGM_Image begin			/AGMIMG_mbuf 0 string def			/AGMIMG_ybuf 0 string def			/AGMIMG_kbuf 0 string def			{				colorbuf dup length AGMIMG_mbuf length ne					{					dup length dup dup					/AGMIMG_mbuf exch string def					/AGMIMG_ybuf exch string def					/AGMIMG_kbuf exch string def					} if				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop			}			addprocs			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf} true 4 colorimage			end	} def				/sep_imageormask_lev1	{		begin			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{								{					255 mul round cvi GrayLookup exch get				} currenttransfer addprocs settransfer				currentdict imageormask			}{				/sep_colorspace_dict AGMCORE_gget/Components known{					MappedCSA 0 get /DeviceCMYK eq{						Components aload pop					}{						0 0 0 Components aload pop 1 exch sub					}ifelse										Adobe_AGM_Image/AGMIMG_k xddf 					Adobe_AGM_Image/AGMIMG_y xddf 					Adobe_AGM_Image/AGMIMG_m xddf 					Adobe_AGM_Image/AGMIMG_c xddf 											AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{						{AGMIMG_k mul 1 exch sub} currenttransfer addprocs settransfer						currentdict imageormask					}{ 												currentcolortransfer						{AGMIMG_k mul 1 exch sub} exch addprocs 4 1 roll						{AGMIMG_y mul 1 exch sub} exch addprocs 4 1 roll						{AGMIMG_m mul 1 exch sub} exch addprocs 4 1 roll						{AGMIMG_c mul 1 exch sub} exch addprocs 4 1 roll						setcolortransfer						currentdict tint_image_to_color					}ifelse				}{										MappedCSA 0 get /DeviceGray eq {						{255 mul round cvi ColorLookup exch get 0 get} currenttransfer addprocs settransfer						currentdict imageormask					}{						MappedCSA 0 get /DeviceCMYK eq {							currentcolortransfer							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub} exch addprocs 4 1 roll							setcolortransfer 							currentdict tint_image_to_color						}{ 							currentcolortransfer							{pop 1} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 2 get} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 1 get} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 0 get} exch addprocs 4 1 roll							setcolortransfer 							currentdict tint_image_to_color						}ifelse					}ifelse				}ifelse			}ifelse		end	}def	/sep_image_lev1_sep	{		begin			/sep_colorspace_dict AGMCORE_gget/Components known{				Components aload pop								Adobe_AGM_Image/AGMIMG_k xddf 				Adobe_AGM_Image/AGMIMG_y xddf 				Adobe_AGM_Image/AGMIMG_m xddf 				Adobe_AGM_Image/AGMIMG_c xddf 									{AGMIMG_c mul 1 exch sub}				{AGMIMG_m mul 1 exch sub}				{AGMIMG_y mul 1 exch sub}				{AGMIMG_k mul 1 exch sub}			}{ 				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}			}ifelse						AGMCORE_get_ink_data currenttransfer addprocs settransfer						currentdict imageormask_sys						end	}def	/indexed_imageormask_lev1	{		/indexed_colorspace_dict AGMCORE_gget begin		begin			currentdict			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{								{HiVal mul round cvi GrayLookup exch get HiVal div} currenttransfer addprocs settransfer				imageormask			}{								MappedCSA 0 get /DeviceGray eq {					{HiVal mul round cvi Lookup exch get HiVal div} currenttransfer addprocs settransfer					imageormask				}{					MappedCSA 0 get /DeviceCMYK eq {						currentcolortransfer						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						{4 mul HiVal mul round cvi       Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						setcolortransfer 						tint_image_to_color					}{ 						currentcolortransfer						{pop 1} exch addprocs 4 1 roll						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div} exch addprocs 4 1 roll						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div} exch addprocs 4 1 roll						{3 mul HiVal mul round cvi 	   Lookup exch get HiVal div} exch addprocs 4 1 roll						setcolortransfer 						tint_image_to_color					}ifelse				}ifelse			}ifelse		end end	}def	/indexed_image_lev1_sep	{		/indexed_colorspace_dict AGMCORE_gget begin		begin			{4 mul HiVal mul round cvi       Lookup exch get HiVal div 1 exch sub}			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}						AGMCORE_get_ink_data currenttransfer addprocs settransfer						currentdict imageormask_sys						end end	}def}ifendsystemdict /setpacking known{	setpacking} if%%EndResource%ADOBeginClientInjection: DocumentProlog End "AI10"%ADOEndClientInjection: DocumentProlog End "AI10"currentdict Adobe_AGM_Utils eq {end} if%%EndProlog%%BeginSetup%ADOBeginClientInjection: DocumentSetup Start "AI10"%ADOEndClientInjection: DocumentSetup Start "AI10"Adobe_AGM_Utils begin2 2010 true Adobe_AGM_Core/doc_setup get execAdobe_CoolType_Core/doc_setup get execAdobe_AGM_Image/doc_setup get exec%ADOBeginClientInjection: DocumentSetup End "AI10"%ADOEndClientInjection: DocumentSetup End "AI10"currentdict Adobe_AGM_Utils eq {end} if%%EndSetup%%Page: SDlogo-3p.pdf 1%%EndPageComments%%BeginPageSetup%ADOBeginClientInjection: PageSetup Start "AI10"%ADOEndClientInjection: PageSetup Start "AI10"Adobe_AGM_Utils beginAdobe_AGM_Core/page_setup get execAdobe_CoolType_Core/page_setup get execAdobe_AGM_Image/page_setup get exec%ADOBeginClientInjection: PageSetup End "AI10"%ADOEndClientInjection: PageSetup End "AI10"%%EndPageSetupAdobe_AGM_Core/AGMCORE_save save ddf1 -1 scale 0 -33.8292 translate[1 0 0 1 0 0 ]  concatmark/0 [/DeviceGray] add_csa/CSA /0 /1 [/DeviceCMYK] add_csa/CSA /1 /2 [/DeviceRGB] add_csa/CSA /2 cleartomark800 path_rez% page clipgsavenewpathgsave % PSGState0 0 mo0 33.8292 li169.843 33.8292 li169.843 0 liclp[1 0 0 1 0 0 ] concat%ADOBeginClientInjection: BeginPageContent "AI10"%ADOEndClientInjection: BeginPageContent "AI10"33.564 13.5801 mo32.4961 14.168 30.6416 14.5118 29.4258 14.3526 cv28.2076 14.1905 28.024 13.793 29.0206 13.461 cv30.0147 13.1348 31.8668 12.7891 33.1587 12.6885 cv34.4507 12.5928 34.6319 12.9893 33.564 13.5801 cvtrue sop/0 <</Name (PANTONE Black CVC)/CSA /1 /TintMethod /Subtractive/TintProc null/MappedCSA null/NComponents 4 /ColorLookup [ [ 0 0 0 0 ] [ 0 0 0 0.00392157 ][ 0 0 0 0.00784314 ] [ 0 0 0 0.0117648 ][ 0 0 0 0.0156863 ] [ 0 0 0 0.0196079 ][ 0 0 0 0.0235295 ] [ 0 0 0 0.027451 ][ 0 0 0 0.0313726 ] [ 0 0 0 0.0352942 ][ 0 0 0 0.0392157 ] [ 0 0 0 0.0431373 ][ 0 0 0 0.0470589 ] [ 0 0 0 0.0509804 ][ 0 0 0 0.054902 ] [ 0 0 0 0.0588236 ][ 0 0 0 0.0627451 ] [ 0 0 0 0.0666667 ][ 0 0 0 0.0705883 ] [ 0 0 0 0.0745098 ][ 0 0 0 0.0784314 ] [ 0 0 0 0.082353 ][ 0 0 0 0.0862746 ] [ 0 0 0 0.0901961 ][ 0 0 0 0.0941177 ] [ 0 0 0 0.0980393 ][ 0 0 0 0.101961 ] [ 0 0 0 0.105883 ][ 0 0 0 0.109804 ] [ 0 0 0 0.113726 ][ 0 0 0 0.117648 ] [ 0 0 0 0.121569 ][ 0 0 0 0.125491 ] [ 0 0 0 0.129412 ][ 0 0 0 0.133334 ] [ 0 0 0 0.137255 ][ 0 0 0 0.141177 ] [ 0 0 0 0.145099 ][ 0 0 0 0.14902 ] [ 0 0 0 0.152942 ][ 0 0 0 0.156863 ] [ 0 0 0 0.160785 ][ 0 0 0 0.164706 ] [ 0 0 0 0.168628 ][ 0 0 0 0.17255 ] [ 0 0 0 0.176471 ][ 0 0 0 0.180393 ] [ 0 0 0 0.184314 ][ 0 0 0 0.188236 ] [ 0 0 0 0.192157 ][ 0 0 0 0.196079 ] [ 0 0 0 0.2 ][ 0 0 0 0.203922 ] [ 0 0 0 0.207844 ][ 0 0 0 0.211765 ] [ 0 0 0 0.215687 ][ 0 0 0 0.219608 ] [ 0 0 0 0.22353 ][ 0 0 0 0.227451 ] [ 0 0 0 0.231373 ][ 0 0 0 0.235295 ] [ 0 0 0 0.239216 ][ 0 0 0 0.243138 ] [ 0 0 0 0.247059 ][ 0 0 0 0.250981 ] [ 0 0 0 0.254902 ][ 0 0 0 0.258824 ] [ 0 0 0 0.262746 ][ 0 0 0 0.266667 ] [ 0 0 0 0.270589 ][ 0 0 0 0.27451 ] [ 0 0 0 0.278432 ][ 0 0 0 0.282353 ] [ 0 0 0 0.286275 ][ 0 0 0 0.290197 ] [ 0 0 0 0.294118 ][ 0 0 0 0.29804 ] [ 0 0 0 0.301961 ][ 0 0 0 0.305883 ] [ 0 0 0 0.309804 ][ 0 0 0 0.313726 ] [ 0 0 0 0.317648 ][ 0 0 0 0.321569 ] [ 0 0 0 0.325491 ][ 0 0 0 0.329412 ] [ 0 0 0 0.333334 ][ 0 0 0 0.337255 ] [ 0 0 0 0.341177 ][ 0 0 0 0.345099 ] [ 0 0 0 0.34902 ][ 0 0 0 0.352942 ] [ 0 0 0 0.356863 ][ 0 0 0 0.360785 ] [ 0 0 0 0.364706 ][ 0 0 0 0.368628 ] [ 0 0 0 0.37255 ][ 0 0 0 0.376471 ] [ 0 0 0 0.380393 ][ 0 0 0 0.384314 ] [ 0 0 0 0.388236 ][ 0 0 0 0.392157 ] [ 0 0 0 0.396079 ][ 0 0 0 0.4 ] [ 0 0 0 0.403922 ][ 0 0 0 0.407844 ] [ 0 0 0 0.411765 ][ 0 0 0 0.415687 ] [ 0 0 0 0.419608 ][ 0 0 0 0.42353 ] [ 0 0 0 0.427451 ][ 0 0 0 0.431373 ] [ 0 0 0 0.435295 ][ 0 0 0 0.439216 ] [ 0 0 0 0.443138 ][ 0 0 0 0.447059 ] [ 0 0 0 0.450981 ][ 0 0 0 0.454902 ] [ 0 0 0 0.458824 ][ 0 0 0 0.462746 ] [ 0 0 0 0.466667 ][ 0 0 0 0.470589 ] [ 0 0 0 0.47451 ][ 0 0 0 0.478432 ] [ 0 0 0 0.482353 ][ 0 0 0 0.486275 ] [ 0 0 0 0.490197 ][ 0 0 0 0.494118 ] [ 0 0 0 0.49804 ][ 0 0 0 0.501961 ] [ 0 0 0 0.505883 ][ 0 0 0 0.509804 ] [ 0 0 0 0.513726 ][ 0 0 0 0.517648 ] [ 0 0 0 0.521569 ][ 0 0 0 0.525491 ] [ 0 0 0 0.529412 ][ 0 0 0 0.533334 ] [ 0 0 0 0.537255 ][ 0 0 0 0.541177 ] [ 0 0 0 0.545098 ][ 0 0 0 0.54902 ] [ 0 0 0 0.552942 ][ 0 0 0 0.556863 ] [ 0 0 0 0.560785 ][ 0 0 0 0.564706 ] [ 0 0 0 0.568628 ][ 0 0 0 0.57255 ] [ 0 0 0 0.576471 ][ 0 0 0 0.580393 ] [ 0 0 0 0.584314 ][ 0 0 0 0.588236 ] [ 0 0 0 0.592157 ][ 0 0 0 0.596079 ] [ 0 0 0 0.6 ][ 0 0 0 0.603922 ] [ 0 0 0 0.607844 ][ 0 0 0 0.611765 ] [ 0 0 0 0.615687 ][ 0 0 0 0.619608 ] [ 0 0 0 0.62353 ][ 0 0 0 0.627451 ] [ 0 0 0 0.631373 ][ 0 0 0 0.635295 ] [ 0 0 0 0.639216 ][ 0 0 0 0.643138 ] [ 0 0 0 0.647059 ][ 0 0 0 0.650981 ] [ 0 0 0 0.654902 ][ 0 0 0 0.658824 ] [ 0 0 0 0.662746 ][ 0 0 0 0.666667 ] [ 0 0 0 0.670589 ][ 0 0 0 0.67451 ] [ 0 0 0 0.678432 ][ 0 0 0 0.682353 ] [ 0 0 0 0.686275 ][ 0 0 0 0.690197 ] [ 0 0 0 0.694118 ][ 0 0 0 0.69804 ] [ 0 0 0 0.701961 ][ 0 0 0 0.705883 ] [ 0 0 0 0.709804 ][ 0 0 0 0.713726 ] [ 0 0 0 0.717648 ][ 0 0 0 0.721569 ] [ 0 0 0 0.725491 ][ 0 0 0 0.729412 ] [ 0 0 0 0.733334 ][ 0 0 0 0.737255 ] [ 0 0 0 0.741177 ][ 0 0 0 0.745098 ] [ 0 0 0 0.74902 ][ 0 0 0 0.752942 ] [ 0 0 0 0.756863 ][ 0 0 0 0.760785 ] [ 0 0 0 0.764706 ][ 0 0 0 0.768628 ] [ 0 0 0 0.77255 ][ 0 0 0 0.776471 ] [ 0 0 0 0.780393 ][ 0 0 0 0.784314 ] [ 0 0 0 0.788236 ][ 0 0 0 0.792157 ] [ 0 0 0 0.796079 ][ 0 0 0 0.8 ] [ 0 0 0 0.803922 ][ 0 0 0 0.807844 ] [ 0 0 0 0.811765 ][ 0 0 0 0.815687 ] [ 0 0 0 0.819608 ][ 0 0 0 0.82353 ] [ 0 0 0 0.827451 ][ 0 0 0 0.831373 ] [ 0 0 0 0.835295 ][ 0 0 0 0.839216 ] [ 0 0 0 0.843138 ][ 0 0 0 0.847059 ] [ 0 0 0 0.850981 ][ 0 0 0 0.854902 ] [ 0 0 0 0.858824 ][ 0 0 0 0.862746 ] [ 0 0 0 0.866667 ][ 0 0 0 0.870589 ] [ 0 0 0 0.87451 ][ 0 0 0 0.878432 ] [ 0 0 0 0.882353 ][ 0 0 0 0.886275 ] [ 0 0 0 0.890196 ][ 0 0 0 0.894118 ] [ 0 0 0 0.89804 ][ 0 0 0 0.901961 ] [ 0 0 0 0.905883 ][ 0 0 0 0.909804 ] [ 0 0 0 0.913726 ][ 0 0 0 0.917648 ] [ 0 0 0 0.921569 ][ 0 0 0 0.925491 ] [ 0 0 0 0.929412 ][ 0 0 0 0.933334 ] [ 0 0 0 0.937255 ][ 0 0 0 0.941177 ] [ 0 0 0 0.945098 ][ 0 0 0 0.94902 ] [ 0 0 0 0.952942 ][ 0 0 0 0.956863 ] [ 0 0 0 0.960785 ][ 0 0 0 0.964706 ] [ 0 0 0 0.968628 ][ 0 0 0 0.972549 ] [ 0 0 0 0.976471 ][ 0 0 0 0.980393 ] [ 0 0 0 0.984314 ][ 0 0 0 0.988236 ] [ 0 0 0 0.992157 ][ 0 0 0 0.996079 ] [ 0 0 0 1 ]] >>add_csd0.4 /0 get_csdsepcs0.4 sepf26.9229 17.2461 mo25.855 17.8389 24.1031 17.8194 23.0147 17.2081 cv21.9229 16.5928 21.8458 15.8331 22.8394 15.5059 cv23.8335 15.1768 25.5845 15.1944 26.7491 15.5459 cv27.9122 15.8936 27.9898 16.6553 26.9229 17.2461 cv0.4 /0 get_csdsepcs0.4 sepf20.2818 20.9151 mo19.2129 21.502 17.5669 21.1221 16.6026 20.0665 cv15.6407 19.0059 15.6646 17.878 16.6597 17.5489 cv17.6524 17.2217 19.2999 17.6016 20.3389 18.4004 cv21.376 19.1973 21.3497 20.3262 20.2818 20.9151 cv0.4 /0 get_csdsepcs0.4 sepf41.1358 12.1192 mo42.4253 12.0235 42.504 12.7891 41.3062 13.8252 cv40.1119 14.8663 38.1573 15.5743 36.9405 15.4073 cv35.7237 15.2413 35.6451 14.4776 36.7652 13.6993 cv37.8868 12.9239 39.8428 12.211 41.1358 12.1192 cv0.4 /0 get_csdsepcs0.4 sepf49.1583 11.5254 mo50.4517 11.4327 50.4239 12.5596 49.1011 14.0459 cv47.7793 15.5352 45.7208 16.6075 44.5054 16.4405 cv43.2847 16.2735 43.3135 15.1436 44.5626 13.919 cv45.8116 12.6954 47.8687 11.6211 49.1583 11.5254 cv0.4 /0 get_csdsepcs0.4 sepf33.9742 17.7276 mo35.1397 18.0792 35.1133 19.2071 33.9166 20.2452 cv32.7227 21.2823 30.8682 21.6299 29.7789 21.0196 cv28.6895 20.4063 28.7154 19.2793 29.836 18.504 cv30.9585 17.7256 32.8106 17.3799 33.9742 17.7276 cv0.4 /0 get_csdsepcs0.4 sepf41.212 19.9112 mo42.379 20.2637 42.2491 21.752 40.9263 23.2364 cv39.6021 24.7237 37.6475 25.4376 36.5557 24.8243 cv35.4664 24.209 35.5948 22.7217 36.8438 21.4952 cv38.0933 20.2686 40.0503 19.5586 41.212 19.9112 cv0.4 /0 get_csdsepcs0.4 sepfgsave % PSGState0 0.00195313 mo169.843 0.00195313 li169.843 33.8292 li0 33.8292 li0 0.00195313 liclp26.7584 23.3868 mo27.7955 24.1856 27.6666 25.6768 26.4698 26.7149 cv25.2759 27.751 23.525 27.7344 22.563 26.6719 cv21.6001 25.6104 21.7286 24.1211 22.8516 23.3467 cv23.9742 22.5665 25.7217 22.586 26.7584 23.3868 cv0.4 /0 get_csdsepcs0.4 sepf33.2042 28.3594 mo34.2408 29.1602 34.0098 31.0137 32.6866 32.502 cv31.3638 33.9893 29.5118 34.335 28.5484 33.2735 cv27.587 32.211 27.8194 30.3565 29.066 29.129 cv30.315 27.9083 32.1695 27.5635 33.2042 28.3594 cv0.4 /0 get_csdsepcs0.4 sepfgrestore % PSGState55.2344 33.17 mo52.7627 33.17 51.1441 31.9942 51.1441 31.9942 cv51.5494 29.8858 li51.5494 29.8858 53.25 31.4678 55.1343 31.4678 cv56.5718 31.4678 57.566 30.7979 57.566 29.5997 cv57.566 28.1016 56.188 27.4346 54.7481 26.6856 cv53.15 25.8536 51.4478 24.9219 51.4478 22.6133 cv51.4478 20.8096 53.0484 19.0909 55.5586 19.0909 cv57.7276 19.0909 59.0831 20.0206 59.0831 20.0206 cv58.6168 21.9473 li58.6168 21.9473 57.2608 20.7911 55.5801 20.7911 cv54.2022 20.7911 53.4918 21.4981 53.4918 22.4092 cv53.4918 23.7481 54.9532 24.3956 56.4502 25.2051 cv57.9903 26.0372 59.5704 27.0508 59.5704 29.2149 cv59.5704 31.5879 57.6661 33.17 55.2344 33.17 cv1 /0 get_csdsepcs1 sepf64.917 33.127 mo62.4249 33.127 60.7457 31.5665 60.7457 28.5879 cv60.7457 26.7666 61.4156 25.3077 62.5264 24.4376 cv63.2774 23.8516 64.1485 23.5655 65.2007 23.5655 cv67.2676 23.5655 68.1768 24.4981 68.1768 24.4981 cv67.5499 25.9961 li67.5499 25.9961 66.7217 25.003 65.2427 25.003 cv63.337 25.003 62.5884 26.4854 62.5884 28.4668 cv62.5884 29.8252 63.3174 31.6075 65.1592 31.6075 cv66.7217 31.6075 67.5298 30.6543 67.5298 30.6543 cv68.2188 31.9512 li68.2188 31.9512 67.1255 33.127 64.917 33.127 cv1 /0 get_csdsepcs1 sepf71.1172 32.9629 mo69.2935 32.9629 li69.2935 23.7696 li71.1172 23.7696 li71.1172 32.9629 licp70.2447 22.2286 mo69.5762 22.2286 69.0718 21.7012 69.0718 21.0313 cv69.0718 20.3653 69.5762 19.8409 70.2447 19.8409 cv70.9136 19.8409 71.4009 20.3653 71.4009 21.0313 cv71.4009 21.7012 70.9136 22.2286 70.2447 22.2286 cv1 /0 get_csdsepcs1 sepf76.6607 24.9434 mo74.9991 24.9434 74.4737 26.462 74.4737 27.0508 cv78.7476 27.0508 li78.7476 26.1377 78.3604 24.9434 76.6607 24.9434 cvcp74.3912 28.3018 mo74.3912 30.5118 75.6871 31.5665 77.0645 31.5665 cv78.7881 31.5665 79.7798 30.1915 79.7798 30.1915 cv80.5284 31.5479 li80.5284 31.5479 79.2325 33.127 76.8443 33.127 cv74.19 33.127 72.5474 31.4249 72.5474 28.3262 cv72.5474 26.8672 73.0123 25.712 73.7857 24.8399 cv74.5342 23.9903 75.6675 23.5655 76.8834 23.5655 cv79.1504 23.5655 80.6309 24.6983 80.6309 28.3018 cv74.3912 28.3018 li1 /0 get_csdsepcs1 sepf88.004 32.9629 mo88.004 27.251 li88.004 25.5704 87.1504 24.9834 86.0562 24.9834 cv84.7808 24.9834 83.9712 25.9346 83.9712 27.251 cv83.9712 32.9629 li82.149 32.9629 li82.149 23.7696 li83.9712 23.7696 li83.9712 25.1055 li83.9712 25.1055 84.6807 23.5655 86.7657 23.5655 cv88.6495 23.5655 89.8223 24.5381 89.8223 26.6241 cv89.8223 32.9629 li88.004 32.9629 li1 /0 get_csdsepcs1 sepf95.2676 33.127 mo92.7696 33.127 91.0879 31.5665 91.0879 28.5879 cv91.0879 26.7666 91.753 25.3077 92.8692 24.4376 cv93.6182 23.8516 94.4893 23.5655 95.5489 23.5655 cv97.6192 23.5655 98.5206 24.4981 98.5206 24.4981 cv97.8956 25.9961 li97.8956 25.9961 97.0645 25.003 95.5899 25.003 cv93.6788 25.003 92.9327 26.4854 92.9327 28.4668 cv92.9327 29.8252 93.6602 31.6075 95.5088 31.6075 cv97.0645 31.6075 97.879 30.6543 97.879 30.6543 cv98.5596 31.9512 li98.5596 31.9512 97.4659 33.127 95.2676 33.127 cv1 /0 get_csdsepcs1 sepf102.986 24.9434 mo101.32 24.9434 100.79 26.462 100.79 27.0508 cv105.066 27.0508 li105.066 26.1377 104.688 24.9434 102.986 24.9434 cvcp100.721 28.3018 mo100.721 30.5118 102.017 31.5665 103.39 31.5665 cv105.109 31.5665 106.098 30.1915 106.098 30.1915 cv106.85 31.5479 li106.85 31.5479 105.559 33.127 103.167 33.127 cv100.51 33.127 98.8721 31.4249 98.8721 28.3262 cv98.8721 26.8672 99.3331 25.712 100.106 24.8399 cv100.858 23.9903 101.993 23.5655 103.208 23.5655 cv105.479 23.5655 106.954 24.6983 106.954 28.3018 cv100.721 28.3018 li1 /0 get_csdsepcs1 sepf112.584 20.8506 mo111.21 20.8506 110.396 20.9737 110.396 20.9737 cv110.396 31.2413 li110.396 31.2413 111.31 31.4844 112.625 31.4844 cv115.805 31.4844 117.583 28.9532 117.583 25.8965 cv117.583 23.2823 116.165 20.8506 112.584 20.8506 cvcp112.625 33.1456 mo109.956 33.1456 108.506 32.8838 108.506 32.8838 cv108.506 19.3311 li108.506 19.3311 110.596 19.1504 112.743 19.1504 cv116.798 19.1504 119.609 21.337 119.609 25.4678 cv119.609 29.9444 117.259 33.1456 112.625 33.1456 cv1 /0 get_csdsepcs1 sepf123.163 32.9629 mo121.335 32.9629 li121.335 23.7696 li123.163 23.7696 li123.163 32.9629 licp122.29 22.2286 mo121.617 22.2286 121.114 21.7012 121.114 21.0313 cv121.114 20.3653 121.617 19.8409 122.29 19.8409 cv122.951 19.8409 123.442 20.3653 123.442 21.0313 cv123.442 21.7012 122.951 22.2286 122.29 22.2286 cv1 /0 get_csdsepcs1 sepf130.289 25.712 mo130.289 25.712 129.795 25.3702 129.034 25.3702 cv127.899 25.3702 127.108 26.2608 127.108 27.8614 cv127.108 32.9629 li125.279 32.9629 li125.279 23.7696 li127.108 23.7696 li127.108 25.1055 li127.108 25.1055 127.899 23.5655 129.498 23.5655 cv130.25 23.5655 130.611 23.7696 130.611 23.7696 cv130.289 25.712 li1 /0 get_csdsepcs1 sepf134.984 24.9434 mo133.33 24.9434 132.796 26.462 132.796 27.0508 cv137.071 27.0508 li137.071 26.1377 136.69 24.9434 134.984 24.9434 cvcp132.716 28.3018 mo132.716 30.5118 134.015 31.5665 135.388 31.5665 cv137.114 31.5665 138.108 30.1915 138.108 30.1915 cv138.862 31.5479 li138.862 31.5479 137.554 33.127 135.165 33.127 cv132.515 33.127 130.871 31.4249 130.871 28.3262 cv130.871 26.8672 131.341 25.712 132.104 24.8399 cv132.856 23.9903 133.991 23.5655 135.208 23.5655 cv137.475 23.5655 138.958 24.6983 138.958 28.3018 cv132.716 28.3018 li1 /0 get_csdsepcs1 sepf144.079 33.127 mo141.586 33.127 139.905 31.5665 139.905 28.5879 cv139.905 26.7666 140.576 25.3077 141.689 24.4376 cv142.442 23.8516 143.315 23.5655 144.358 23.5655 cv146.428 23.5655 147.339 24.4981 147.339 24.4981 cv146.709 25.9961 li146.709 25.9961 145.887 25.003 144.399 25.003 cv142.504 25.003 141.75 26.4854 141.75 28.4668 cv141.75 29.8252 142.483 31.6075 144.32 31.6075 cv145.887 31.6075 146.688 30.6543 146.688 30.6543 cv147.382 31.9512 li147.382 31.9512 146.289 33.127 144.079 33.127 cv1 /0 get_csdsepcs1 sepfgsave % PSGState0 0.00195313 mo169.843 0.00195313 li169.843 33.8292 li0 33.8292 li0 0.00195313 liclp151.044 25.1836 mo150.985 29.6426 li150.96 31.2413 151.516 31.5665 152.16 31.5665 cv152.951 31.5665 153.485 30.917 153.485 30.917 cv153.826 32.3379 li153.826 32.3379 153.05 33.127 151.578 33.127 cv149.931 33.127 149.167 32.1944 149.167 30.4112 cv149.229 25.1836 li147.902 25.1836 li147.902 23.7696 li149.229 23.7696 li149.229 20.8311 li151.044 20.8311 li151.044 23.7696 li153.882 23.7696 li153.882 25.1836 li151.044 25.1836 li1 /0 get_csdsepcs1 sepf-0.015625 6.47657 mo2.46485 0.00195313 li3.42188 0.00195313 li6.06299 6.47657 li5.08545 6.47657 li4.33692 4.51856 li1.60059 4.51856 li0.897461 6.47657 li-0.015625 6.47657 licp1.83887 3.82813 mo4.08301 3.82813 li3.39795 2.0293 li3.19532 1.48536 3.03809 1.03126 2.92823 0.674805 cv2.83545 1.09668 2.71143 1.51172 2.55665 1.91797 cv1.83887 3.82813 li1 /0 get_csdsepcs1 sepfgrestore % PSGState7.7671 6.47657 mo6.00342 1.78809 li6.85645 1.78809 li7.85547 4.59571 li7.96534 4.90137 8.06544 5.21485 8.15821 5.542 cv8.22754 5.29395 8.32618 4.99903 8.45362 4.6504 cv9.49317 1.78809 li10.3155 1.78809 li8.54444 6.47657 li7.7671 6.47657 li1 /0 get_csdsepcs1 sepf14.1006 5.89747 mo13.8135 6.1504 13.5337 6.32911 13.2593 6.43165 cv12.9854 6.53614 12.691 6.58887 12.375 6.58887 cv11.858 6.58887 11.4571 6.46192 11.1783 6.20997 cv10.9019 5.95704 10.7613 5.63379 10.7613 5.24317 cv10.7613 5.01075 10.8135 4.80079 10.92 4.61231 cv11.0245 4.4209 11.1617 4.26954 11.3321 4.15333 cv11.5049 4.03809 11.6944 3.95118 11.9078 3.89258 cv12.0674 3.85254 12.3038 3.81055 12.6207 3.77344 cv13.2691 3.69727 13.7432 3.6045 14.0508 3.49708 cv14.0533 3.38868 14.0557 3.32032 14.0557 3.28907 cv14.0557 2.96778 13.9805 2.74024 13.8292 2.60645 cv13.6241 2.42774 13.3238 2.33692 12.9258 2.33692 cv12.5513 2.33692 12.275 2.40528 12.0962 2.53614 cv11.92 2.667 11.7862 2.89844 11.7017 3.23243 cv10.9019 3.1211 li10.9732 2.78907 11.0904 2.52247 11.2525 2.31739 cv11.4146 2.11231 11.648 1.95508 11.9556 1.84473 cv12.2608 1.73438 12.6158 1.68067 13.0186 1.68067 cv13.4214 1.68067 13.7457 1.72657 13.9971 1.82129 cv14.2486 1.91407 14.4322 2.03321 14.5503 2.17481 cv14.668 2.31836 14.7505 2.49805 14.7969 2.71485 cv14.8257 2.85254 14.8375 3.09668 14.8375 3.4502 cv14.8375 4.50879 li14.8375 5.25 14.8565 5.71876 14.8897 5.91504 cv14.9234 6.11231 14.9898 6.29786 15.0899 6.47657 cv14.2735 6.47657 li14.1832 6.3125 14.127 6.11915 14.1006 5.89747 cvcp14.0557 4.125 mo13.7623 4.24317 13.3238 4.34278 12.7398 4.42579 cv12.4073 4.47168 12.1749 4.5254 12.0367 4.58399 cv11.9004 4.64356 11.7945 4.7295 11.7193 4.84278 cv11.6456 4.95606 11.6084 5.08204 11.6084 5.21876 cv11.6084 5.42969 11.6885 5.60938 11.8516 5.75 cv12.0137 5.89063 12.2486 5.96094 12.5635 5.96094 cv12.8731 5.96094 13.1475 5.89258 13.3882 5.75879 cv13.629 5.62403 13.8067 5.44239 13.9195 5.20801 cv14.0054 5.03223 14.0508 4.76465 14.0508 4.417 cv14.0557 4.125 li1 /0 get_csdsepcs1 sepf16.878 0.910157 mo16.0782 0.910157 li16.0782 0 li16.878 0 li16.878 0.910157 licp16.0782 6.47657 mo16.0782 1.78809 li16.878 1.78809 li16.878 6.47657 li16.0782 6.47657 li1 /0 get_csdsepcs1 sepf18.0792 6.47657 mo18.879 6.47657 li18.879 0 li18.0792 0 li18.0792 6.47657 li1 /0 get_csdsepcs1 sepf23.1851 5.89747 mo22.898 6.1504 22.6168 6.32911 22.3428 6.43165 cv22.0674 6.53614 21.774 6.58887 21.4605 6.58887 cv20.94 6.58887 20.543 6.46192 20.2627 6.20997 cv19.9839 5.95704 19.8458 5.63379 19.8458 5.24317 cv19.8458 5.01075 19.898 4.80079 20.003 4.61231 cv20.1104 4.4209 20.2461 4.26954 20.4175 4.15333 cv20.5879 4.03809 20.7798 3.95118 20.9947 3.89258 cv21.1495 3.85254 21.3877 3.81055 21.7051 3.77344 cv22.3531 3.69727 22.8287 3.6045 23.1353 3.49708 cv23.1363 3.38868 23.1387 3.32032 23.1387 3.28907 cv23.1387 2.96778 23.0626 2.74024 22.9136 2.60645 cv22.711 2.42774 22.4083 2.33692 22.0103 2.33692 cv21.6348 2.33692 21.3594 2.40528 21.1807 2.53614 cv21.004 2.667 20.8731 2.89844 20.7862 3.23243 cv19.9864 3.1211 li20.0577 2.78907 20.1724 2.52247 20.3365 2.31739 cv20.4966 2.11231 20.73 1.95508 21.0401 1.84473 cv21.3448 1.73438 21.7012 1.68067 22.1055 1.68067 cv22.5084 1.68067 22.8326 1.72657 23.0826 1.82129 cv23.3331 1.91407 23.5167 2.03321 23.6368 2.17481 cv23.754 2.31836 23.836 2.49805 23.8838 2.71485 cv23.9097 2.85254 23.9219 3.09668 23.9219 3.4502 cv23.9219 4.50879 li23.9219 5.25 23.9385 5.71876 23.9742 5.91504 cv24.0064 6.11231 24.0743 6.29786 24.1734 6.47657 cv23.358 6.47657 li23.2686 6.3125 23.2115 6.11915 23.1851 5.89747 cvcp23.1387 4.125 mo22.8467 4.24317 22.4083 4.34278 21.8243 4.42579 cv21.4927 4.47168 21.2579 4.5254 21.1211 4.58399 cv20.9825 4.64356 20.878 4.7295 20.8038 4.84278 cv20.73 4.95606 20.6919 5.08204 20.6919 5.21876 cv20.6919 5.42969 20.7715 5.60938 20.9351 5.75 cv21.0982 5.89063 21.3331 5.96094 21.6475 5.96094 cv21.9576 5.96094 22.232 5.89258 22.4727 5.75879 cv22.7144 5.62403 22.8921 5.44239 23.004 5.20801 cv23.0899 5.03223 23.1353 4.76465 23.1353 4.417 cv23.1387 4.125 li1 /0 get_csdsepcs1 sepf25.8824 6.47657 mo25.146 6.47657 li25.146 0.00195313 li25.9454 0.00195313 li25.9454 2.31739 li26.2852 1.89161 26.7178 1.68067 27.2461 1.68067 cv27.5357 1.68067 27.8145 1.73731 28.0718 1.85352 cv28.3355 1.96876 28.5484 2.13477 28.7168 2.34278 cv28.8848 2.55567 29.0157 2.81055 29.1114 3.1084 cv29.2066 3.40626 29.2544 3.72461 29.2544 4.06446 cv29.2544 4.86719 29.0538 5.48926 28.6509 5.92872 cv28.2481 6.36817 27.7666 6.58887 27.2017 6.58887 cv26.6416 6.58887 26.2032 6.35352 25.8824 5.89063 cv25.8824 6.47657 licp25.8668 4.09766 mo25.8668 4.66114 25.9454 5.06641 26.1031 5.31544 cv26.357 5.72364 26.7012 5.92872 27.1353 5.92872 cv27.4878 5.92872 27.7955 5.77832 28.0528 5.47559 cv28.3116 5.17481 28.439 4.72461 28.439 4.12891 cv28.439 3.51856 28.315 3.06739 28.0684 2.77442 cv27.8218 2.4834 27.521 2.33692 27.171 2.33692 cv26.8179 2.33692 26.5118 2.48829 26.2554 2.78907 cv25.9966 3.08887 25.8668 3.52833 25.8668 4.09766 cv1 /0 get_csdsepcs1 sepf30.1958 6.47657 mo30.9942 6.47657 li30.9942 0 li30.1958 0 li30.1958 6.47657 li1 /0 get_csdsepcs1 sepf35.4498 4.97266 mo36.2803 5.08204 li36.148 5.55665 35.9073 5.92872 35.5567 6.19434 cv35.2042 6.45704 34.7544 6.58887 34.2076 6.58887 cv33.5186 6.58887 32.9717 6.37696 32.5674 5.95411 cv32.1622 5.53126 31.9634 4.93653 31.9634 4.17188 cv31.9634 3.38282 32.1661 2.77247 32.5748 2.33399 cv32.9825 1.89844 33.5127 1.68067 34.1622 1.68067 cv34.794 1.68067 35.3067 1.89258 35.7071 2.31836 cv36.1075 2.74512 36.3067 3.3418 36.3067 4.11817 cv36.3067 4.16407 36.3052 4.23633 36.3003 4.32911 cv32.7784 4.32911 li32.8082 4.84571 32.9537 5.24317 33.2183 5.51758 cv33.483 5.79102 33.8121 5.92872 34.2051 5.92872 cv34.501 5.92872 34.7486 5.85157 34.9561 5.70215 cv35.1636 5.54786 35.3282 5.30372 35.4498 4.97266 cvcp32.8262 3.66993 mo35.46 3.66993 li35.4234 3.28126 35.3233 2.98926 35.1563 2.79102 cv34.9024 2.49122 34.5723 2.33692 34.167 2.33692 cv33.7999 2.33692 33.4903 2.45899 33.2398 2.69922 cv32.9908 2.94434 32.8511 3.26563 32.8262 3.66993 cv1 /0 get_csdsepcs1 sepf39.5044 4.13379 mo39.5044 3.26368 39.7461 2.62012 40.2315 2.2002 cv40.6363 1.85352 41.1348 1.68067 41.7188 1.68067 cv42.3672 1.68067 42.8951 1.89161 43.3086 2.31446 cv43.7188 2.73731 43.9273 3.32325 43.9273 4.06641 cv43.9273 4.67188 43.8365 5.14649 43.6519 5.49415 cv43.4708 5.83985 43.2051 6.10938 42.8555 6.29981 cv42.5103 6.49219 42.1299 6.58887 41.7188 6.58887 cv41.0562 6.58887 40.522 6.37794 40.1168 5.95704 cv39.7071 5.53516 39.5044 4.92481 39.5044 4.13379 cvcp40.3194 4.13086 mo40.3194 4.73438 40.4532 5.18262 40.7164 5.48243 cv40.9795 5.78028 41.316 5.92872 41.7188 5.92872 cv42.1158 5.92872 42.4483 5.78028 42.7139 5.47754 cv42.9771 5.17774 43.1109 4.71973 43.1109 4.10645 cv43.1109 3.5254 42.9771 3.08497 42.7105 2.78614 cv42.4444 2.48633 42.1143 2.33692 41.7188 2.33692 cv41.316 2.33692 40.9795 2.48633 40.7164 2.78418 cv40.4532 3.08204 40.3194 3.53126 40.3194 4.13086 cv1 /0 get_csdsepcs1 sepf44.8536 6.47657 mo44.8536 1.78809 li45.5733 1.78809 li45.5733 2.45508 li45.919 1.9375 46.4161 1.68067 47.0704 1.68067 cv47.3541 1.68067 47.6138 1.73047 47.8531 1.83106 cv48.0879 1.9336 48.2691 2.06641 48.3858 2.23145 cv48.503 2.39844 48.5865 2.59278 48.6338 2.82032 cv48.6626 2.96778 48.6792 3.22559 48.6792 3.5918 cv48.6792 6.47657 li47.8785 6.47657 li47.8785 3.62305 li47.8785 3.29981 47.8462 3.0586 47.7852 2.89844 cv47.7256 2.73731 47.6124 2.60938 47.4542 2.5127 cv47.2989 2.41602 47.1133 2.36915 46.8985 2.36915 cv46.5601 2.36915 46.2666 2.47754 46.0215 2.69239 cv45.7735 2.90626 45.6519 3.31446 45.6519 3.91407 cv45.6519 6.47657 li44.8536 6.47657 li1 /0 get_csdsepcs1 sepf49.8853 6.47657 mo50.6851 6.47657 li50.6851 0 li49.8853 0 li49.8853 6.47657 li1 /0 get_csdsepcs1 sepf51.9185 0.910157 mo52.7198 0.910157 li52.7198 0 li51.9185 0 li51.9185 0.910157 licp52.7198 6.47657 mo52.7198 1.78809 li51.9185 1.78809 li51.9185 6.47657 li52.7198 6.47657 li1 /0 get_csdsepcs1 sepf53.9351 6.47657 mo53.9351 1.78809 li54.6578 1.78809 li54.6578 2.45508 li55.0035 1.9375 55.5015 1.68067 56.1544 1.68067 cv56.438 1.68067 56.6993 1.73047 56.9366 1.83106 cv57.1749 1.9336 57.3511 2.06641 57.4703 2.23145 cv57.587 2.39844 57.6719 2.59278 57.7193 2.82032 cv57.7491 2.96778 57.7623 3.22559 57.7623 3.5918 cv57.7623 6.47657 li56.9624 6.47657 li56.9624 3.62305 li56.9624 3.29981 56.9317 3.0586 56.8697 2.89844 cv56.8077 2.73731 56.6983 2.60938 56.5406 2.5127 cv56.3824 2.41602 56.1973 2.36915 55.983 2.36915 cv55.6431 2.36915 55.3511 2.47754 55.1045 2.69239 cv54.858 2.90626 54.7349 3.31446 54.7349 3.91407 cv54.7349 6.47657 li53.9351 6.47657 li1 /0 get_csdsepcs1 sepf62.209 4.97266 mo63.0352 5.08204 li62.9053 5.55665 62.6646 5.92872 62.314 6.19434 cv61.9615 6.45704 61.5118 6.58887 60.9649 6.58887 cv60.2759 6.58887 59.7276 6.37696 59.3248 5.95411 cv58.9195 5.53126 58.7193 4.93653 58.7193 4.17188 cv58.7193 3.38282 58.9244 2.77247 59.3321 2.33399 cv59.7408 1.89844 60.2691 1.68067 60.9195 1.68067 cv61.5513 1.68067 62.065 1.89258 62.4644 2.31836 cv62.8648 2.74512 63.0626 3.3418 63.0626 4.11817 cv63.0626 4.16407 63.0626 4.23633 63.0577 4.32911 cv59.5347 4.32911 li59.5635 4.84571 59.71 5.24317 59.9732 5.51758 cv60.2378 5.79102 60.5669 5.92872 60.9624 5.92872 cv61.2559 5.92872 61.5059 5.85157 61.7134 5.70215 cv61.921 5.54786 62.0874 5.30372 62.209 4.97266 cvcp59.5811 3.66993 mo62.2154 3.66993 li62.1807 3.28126 62.0792 2.98926 61.9136 2.79102 cv61.6597 2.49122 61.3287 2.33692 60.9244 2.33692 cv60.5547 2.33692 60.2476 2.45899 59.9971 2.69922 cv59.7466 2.94434 59.6075 3.26563 59.5811 3.66993 cv1 /0 get_csdsepcs1 sepf69.6324 5.89747 mo69.3448 6.1504 69.065 6.32911 68.7906 6.43165 cv68.5166 6.53614 68.2198 6.58887 67.9063 6.58887 cv67.3868 6.58887 66.9888 6.46192 66.711 6.20997 cv66.4307 5.95704 66.2901 5.63379 66.2901 5.24317 cv66.2901 5.01075 66.3448 4.80079 66.4498 4.61231 cv66.5572 4.4209 66.6929 4.26954 66.8648 4.15333 cv67.0337 4.03809 67.2271 3.95118 67.439 3.89258 cv67.5962 3.85254 67.835 3.81055 68.1519 3.77344 cv68.7979 3.69727 69.2745 3.6045 69.5796 3.49708 cv69.5845 3.38868 69.5845 3.32032 69.5845 3.28907 cv69.5845 2.96778 69.5108 2.74024 69.3614 2.60645 cv69.1568 2.42774 68.855 2.33692 68.4546 2.33692 cv68.0801 2.33692 67.8062 2.40528 67.6275 2.53614 cv67.4498 2.667 67.3174 2.89844 67.232 3.23243 cv66.4332 3.1211 li66.5025 2.78907 66.6202 2.52247 66.7837 2.31739 cv66.9434 2.11231 67.1768 1.95508 67.4844 1.84473 cv67.792 1.73438 68.147 1.68067 68.5513 1.68067 cv68.9527 1.68067 69.2794 1.72657 69.5298 1.82129 cv69.7813 1.91407 69.9649 2.03321 70.0826 2.17481 cv70.1993 2.31836 70.2828 2.49805 70.3282 2.71485 cv70.357 2.85254 70.3677 3.09668 70.3677 3.4502 cv70.3677 4.50879 li70.3677 5.25 70.3853 5.71876 70.419 5.91504 cv70.4522 6.11231 70.5215 6.29786 70.6192 6.47657 cv69.8038 6.47657 li69.7154 6.3125 69.6582 6.11915 69.6324 5.89747 cvcp69.5845 4.125 mo69.2925 4.24317 68.855 4.34278 68.271 4.42579 cv67.9395 4.47168 67.7051 4.5254 67.5679 4.58399 cv67.4307 4.64356 67.3248 4.7295 67.2496 4.84278 cv67.1768 4.95606 67.1387 5.08204 67.1387 5.21876 cv67.1387 5.42969 67.2198 5.60938 67.3834 5.75 cv67.543 5.89063 67.7798 5.96094 68.0923 5.96094 cv68.4044 5.96094 68.6788 5.89258 68.9195 5.75879 cv69.1602 5.62403 69.3365 5.44239 69.4512 5.20801 cv69.5367 5.03223 69.5796 4.76465 69.5796 4.417 cv69.5845 4.125 li1 /0 get_csdsepcs1 sepf73.0005 5.80958 mo72.8814 5.80958 72.7916 5.79004 72.7286 5.75196 cv72.6666 5.71387 72.6192 5.66211 72.5904 5.59473 cv72.564 5.53126 72.5499 5.38575 72.5499 5.15821 cv72.5499 2.40723 li73.3506 2.40723 li73.3506 1.79493 li72.5499 1.79493 li72.5499 0.157227 li71.75 0.635743 li71.75 1.79493 li71.1553 1.79493 li71.1553 2.40723 li71.75 2.40723 li71.75 5.10938 li71.75 5.58497 71.7823 5.89942 71.8467 6.04786 cv71.9112 6.19727 72.0254 6.31641 72.1827 6.41016 cv72.3423 6.50196 72.5679 6.5459 72.8575 6.5459 cv73.0347 6.5459 73.2364 6.52344 73.4605 6.47559 cv73.3506 5.77442 li73.2051 5.79688 73.0874 5.80958 73.0005 5.80958 cv1 /0 get_csdsepcs1 sepf77.5127 6.47657 mo76.0743 1.78809 li76.9097 1.78809 li77.6724 4.49317 li77.938 5.5 li77.9488 5.45411 78.0323 5.13379 78.191 4.542 cv78.938 1.78809 li79.7544 1.78809 li80.4688 4.50489 li80.6988 5.40626 li81.8072 1.78809 li82.5806 1.78809 li81.0728 6.47657 li80.2623 6.47657 li79.5127 3.66602 li79.3184 2.87012 li78.3516 6.47657 li77.5127 6.47657 li1 /0 get_csdsepcs1 sepf84.0704 6.47657 mo82.6329 1.78809 li83.4673 1.78809 li84.23 4.49317 li84.4971 5.5 li84.5064 5.45411 84.5923 5.13379 84.7496 4.542 cv85.4947 1.78809 li86.3101 1.78809 li87.0235 4.50489 li87.2579 5.40626 li87.5294 4.50684 li88.3633 1.78809 li89.1377 1.78809 li87.6319 6.47657 li86.8184 6.47657 li86.0694 3.66602 li85.8775 2.87012 li84.9073 6.47657 li84.0704 6.47657 li1 /0 get_csdsepcs1 sepf90.628 6.47657 mo89.1885 1.78809 li90.0225 1.78809 li90.7852 4.49317 li91.0547 5.5 li91.0665 5.45411 91.1504 5.13379 91.3077 4.542 cv92.0538 1.78809 li92.8663 1.78809 li93.5801 4.50489 li93.8155 5.40626 li94.087 4.50684 li94.9278 1.78809 li95.7002 1.78809 li94.1866 6.47657 li93.3741 6.47657 li92.6231 3.66602 li92.4376 2.87012 li91.462 6.47657 li90.628 6.47657 li1 /0 get_csdsepcs1 sepf96.0342 6.47657 mo96.9463 6.47657 li96.9463 5.56836 li96.0342 5.56836 li96.0342 6.47657 li1 /0 get_csdsepcs1 sepf98.0499 5.06641 mo98.8438 4.95606 li98.8819 5.27051 99.004 5.51075 99.2159 5.67774 cv99.4131 5.84473 99.6944 5.92872 100.057 5.92872 cv100.43 5.92872 100.698 5.8545 100.882 5.70704 cv101.052 5.55665 101.142 5.38379 101.142 5.18458 cv101.142 5.00586 101.062 4.86524 100.909 4.7627 cv100.801 4.69239 100.52 4.60254 100.088 4.4961 cv99.5059 4.34571 99.0948 4.2168 98.8721 4.11231 cv98.6407 4.00391 98.4678 3.85547 98.3497 3.66407 cv98.2393 3.47266 98.1797 3.26368 98.1797 3.03321 cv98.1797 2.8252 98.2276 2.62891 98.3194 2.4502 cv98.4229 2.27247 98.5518 2.12403 98.711 2.00586 cv98.8438 1.91407 99.0137 1.8379 99.2227 1.7754 cv99.4444 1.70899 99.6758 1.68067 99.917 1.68067 cv100.287 1.68067 100.608 1.73145 100.892 1.8379 cv101.17 1.94532 101.382 2.08594 101.512 2.26954 cv101.642 2.4502 101.733 2.69239 101.782 2.9961 cv101 3.10645 li100.971 2.86426 100.858 2.67676 100.688 2.54102 cv100.52 2.40723 100.277 2.33692 99.9659 2.33692 cv99.6055 2.33692 99.3458 2.39844 99.1817 2.51954 cv99.0215 2.63868 98.9532 2.7793 98.9532 2.94141 cv98.9532 3.042 98.9805 3.13477 99.043 3.21778 cv99.1133 3.30176 99.2159 3.375 99.3545 3.42872 cv99.4346 3.45899 99.6651 3.5254 100.057 3.63086 cv100.629 3.78321 101.022 3.90723 101.239 4.00098 cv101.473 4.09571 101.642 4.23731 101.775 4.41895 cv101.894 4.60254 101.964 4.82911 101.964 5.09864 cv101.964 5.36719 101.884 5.61817 101.723 5.84961 cv101.572 6.08594 101.352 6.26465 101.062 6.39551 cv100.761 6.52344 100.43 6.58887 100.067 6.58887 cv99.4561 6.58887 98.9805 6.45997 98.6739 6.20606 cv98.3497 5.94825 98.1368 5.57032 98.0499 5.06641 cv1 /0 get_csdsepcs1 sepf105.98 4.76954 mo106.76 4.87696 li106.679 5.41504 106.46 5.83399 106.11 6.13379 cv105.746 6.43653 105.318 6.58887 104.806 6.58887 cv104.153 6.58887 103.64 6.37794 103.248 5.95899 cv102.861 5.54004 102.655 4.93458 102.655 4.15137 cv102.655 3.64454 102.736 3.19922 102.905 2.82032 cv103.078 2.43946 103.337 2.15723 103.683 1.96192 cv104.023 1.7754 104.404 1.68067 104.806 1.68067 cv105.318 1.68067 105.739 1.80958 106.061 2.06641 cv106.388 2.3252 106.59 2.69239 106.694 3.16797 cv105.917 3.2793 li105.845 2.96778 105.717 2.73145 105.529 2.57422 cv105.334 2.41602 105.109 2.33692 104.834 2.33692 cv104.434 2.33692 104.104 2.48145 103.853 2.76954 cv103.602 3.05567 103.469 3.50684 103.469 4.12891 cv103.469 4.75782 103.587 5.21485 103.839 5.5 cv104.08 5.78614 104.404 5.92872 104.793 5.92872 cv105.109 5.92872 105.369 5.83497 105.578 5.64356 cv105.789 5.45411 105.926 5.16309 105.98 4.76954 cv1 /0 get_csdsepcs1 sepf108.237 0.910157 mo107.431 0.910157 li107.431 0 li108.237 0 li108.237 0.910157 licp107.431 6.47657 mo107.431 1.78809 li108.237 1.78809 li108.237 6.47657 li107.431 6.47657 li1 /0 get_csdsepcs1 sepf112.673 4.97266 mo113.497 5.08204 li113.363 5.55665 113.127 5.92872 112.773 6.19434 cv112.423 6.45704 111.971 6.58887 111.427 6.58887 cv110.735 6.58887 110.194 6.37696 109.794 5.95411 cv109.383 5.53126 109.177 4.93653 109.177 4.17188 cv109.177 3.38282 109.391 2.77247 109.794 2.33399 cv110.206 1.89844 110.735 1.68067 111.391 1.68067 cv112.011 1.68067 112.532 1.89258 112.924 2.31836 cv113.324 2.74512 113.524 3.3418 113.524 4.11817 cv113.524 4.16407 113.524 4.23633 113.524 4.32911 cv110.005 4.32911 li110.021 4.84571 110.175 5.24317 110.432 5.51758 cv110.707 5.79102 111.026 5.92872 111.427 5.92872 cv111.721 5.92872 111.971 5.85157 112.182 5.70215 cv112.383 5.54786 112.555 5.30372 112.673 4.97266 cvcp110.045 3.66993 mo112.683 3.66993 li112.646 3.28126 112.543 2.98926 112.383 2.79102 cv112.123 2.49122 111.792 2.33692 111.391 2.33692 cv111.016 2.33692 110.716 2.45899 110.466 2.69922 cv110.215 2.94434 110.074 3.26563 110.045 3.66993 cv1 /0 get_csdsepcs1 sepf114.498 6.47657 mo114.498 1.78809 li115.224 1.78809 li115.224 2.45508 li115.565 1.9375 116.068 1.68067 116.717 1.68067 cv116.999 1.68067 117.259 1.73047 117.5 1.83106 cv117.744 1.9336 117.914 2.06641 118.034 2.23145 cv118.155 2.39844 118.236 2.59278 118.285 2.82032 cv118.316 2.96778 118.325 3.22559 118.325 3.5918 cv118.325 6.47657 li117.531 6.47657 li117.531 3.62305 li117.531 3.29981 117.493 3.0586 117.428 2.89844 cv117.371 2.73731 117.259 2.60938 117.101 2.5127 cv116.95 2.41602 116.757 2.36915 116.548 2.36915 cv116.205 2.36915 115.914 2.47754 115.664 2.69239 cv115.422 2.90626 115.305 3.31446 115.305 3.91407 cv115.305 6.47657 li114.498 6.47657 li1 /0 get_csdsepcs1 sepf122.641 4.76954 mo123.422 4.87696 li123.342 5.41504 123.124 5.83399 122.761 6.13379 cv122.412 6.43653 121.977 6.58887 121.458 6.58887 cv120.814 6.58887 120.292 6.37794 119.902 5.95899 cv119.507 5.54004 119.32 4.93458 119.32 4.15137 cv119.32 3.64454 119.4 3.19922 119.571 2.82032 cv119.741 2.43946 119.992 2.15723 120.344 1.96192 cv120.681 1.7754 121.052 1.68067 121.466 1.68067 cv121.977 1.68067 122.388 1.80958 122.722 2.06641 cv123.042 2.3252 123.253 2.69239 123.342 3.16797 cv122.583 3.2793 li122.501 2.96778 122.369 2.73145 122.179 2.57422 cv121.999 2.41602 121.766 2.33692 121.497 2.33692 cv121.095 2.33692 120.762 2.48145 120.511 2.76954 cv120.26 3.05567 120.13 3.50684 120.13 4.12891 cv120.13 4.75782 120.251 5.21485 120.492 5.5 cv120.746 5.78614 121.052 5.92872 121.445 5.92872 cv121.766 5.92872 122.026 5.83497 122.239 5.64356 cv122.447 5.45411 122.583 5.16309 122.641 4.76954 cv1 /0 get_csdsepcs1 sepf127.317 4.97266 mo128.141 5.08204 li128.009 5.55665 127.769 5.92872 127.417 6.19434 cv127.065 6.45704 126.617 6.58887 126.074 6.58887 cv125.379 6.58887 124.827 6.37696 124.427 5.95411 cv124.023 5.53126 123.826 4.93653 123.826 4.17188 cv123.826 3.38282 124.023 2.77247 124.437 2.33399 cv124.848 1.89844 125.369 1.68067 126.023 1.68067 cv126.654 1.68067 127.167 1.89258 127.569 2.31836 cv127.968 2.74512 128.169 3.3418 128.169 4.11817 cv128.169 4.16407 128.169 4.23633 128.161 4.32911 cv124.638 4.32911 li124.669 4.84571 124.818 5.24317 125.078 5.51758 cv125.34 5.79102 125.672 5.92872 126.064 5.92872 cv126.363 5.92872 126.617 5.85157 126.815 5.70215 cv127.028 5.54786 127.189 5.30372 127.317 4.97266 cvcp124.687 3.66993 mo127.317 3.66993 li127.286 3.28126 127.189 2.98926 127.018 2.79102 cv126.766 2.49122 126.434 2.33692 126.031 2.33692 cv125.661 2.33692 125.352 2.45899 125.098 2.69922 cv124.848 2.94434 124.718 3.26563 124.687 3.66993 cv1 /0 get_csdsepcs1 sepf132.216 6.47657 mo132.216 5.88282 li131.914 6.35157 131.471 6.58887 130.889 6.58887 cv130.509 6.58887 130.157 6.4834 129.836 6.27832 cv129.526 6.07227 129.276 5.78418 129.105 5.41504 cv128.935 5.04395 128.843 4.62012 128.843 4.13672 cv128.843 3.66895 128.923 3.24415 129.075 2.86426 cv129.235 2.48145 129.474 2.18946 129.786 1.98536 cv130.108 1.78028 130.459 1.68067 130.839 1.68067 cv131.13 1.68067 131.384 1.73926 131.601 1.85938 cv131.834 1.97852 132.015 2.13086 132.154 2.32422 cv132.154 0.00195313 li132.948 0.00195313 li132.948 6.47657 li132.216 6.47657 licp129.656 4.13477 mo129.656 4.73633 129.786 5.18458 130.045 5.48536 cv130.296 5.78028 130.611 5.92872 130.961 5.92872 cv131.31 5.92872 131.613 5.78809 131.854 5.50294 cv132.104 5.21876 132.223 4.78614 132.223 4.20215 cv132.223 3.5586 132.104 3.08692 131.854 2.78907 cv131.601 2.48829 131.292 2.33692 130.92 2.33692 cv130.556 2.33692 130.259 2.4834 130.015 2.77247 cv129.777 3.0586 129.656 3.51368 129.656 4.13477 cv1 /0 get_csdsepcs1 sepf134.191 0.910157 mo134.984 0.910157 li134.984 0 li134.191 0 li134.191 0.910157 licp134.984 6.47657 mo134.984 1.78809 li134.191 1.78809 li134.191 6.47657 li134.984 6.47657 li1 /0 get_csdsepcs1 sepf136.21 6.47657 mo136.21 1.78809 li136.933 1.78809 li136.933 2.49122 li137.114 2.15821 137.276 1.94239 137.436 1.83594 cv137.584 1.73145 137.753 1.68067 137.938 1.68067 cv138.208 1.68067 138.479 1.76661 138.747 1.9375 cv138.47 2.667 li138.278 2.55079 138.084 2.49317 137.898 2.49317 cv137.725 2.49317 137.564 2.54786 137.436 2.6504 cv137.292 2.75391 137.194 2.90333 137.143 3.08692 cv137.054 3.37012 137.001 3.67969 137.001 4.01661 cv137.001 6.47657 li136.21 6.47657 li1 /0 get_csdsepcs1 sepf142.455 4.97266 mo143.287 5.08204 li143.157 5.55665 142.916 5.92872 142.562 6.19434 cv142.211 6.45704 141.757 6.58887 141.207 6.58887 cv140.514 6.58887 139.975 6.37696 139.574 5.95411 cv139.169 5.53126 138.958 4.93653 138.958 4.17188 cv138.958 3.38282 139.169 2.77247 139.574 2.33399 cv139.985 1.89844 140.514 1.68067 141.168 1.68067 cv141.791 1.68067 142.31 1.89258 142.711 2.31836 cv143.103 2.74512 143.305 3.3418 143.305 4.11817 cv143.305 4.16407 143.305 4.23633 143.305 4.32911 cv139.784 4.32911 li139.814 4.84571 139.954 5.24317 140.225 5.51758 cv140.485 5.79102 140.817 5.92872 141.207 5.92872 cv141.5 5.92872 141.75 5.85157 141.96 5.70215 cv142.161 5.54786 142.332 5.30372 142.455 4.97266 cvcp139.824 3.66993 mo142.461 3.66993 li142.423 3.28126 142.322 2.98926 142.161 2.79102 cv141.901 2.49122 141.581 2.33692 141.168 2.33692 cv140.795 2.33692 140.495 2.45899 140.245 2.69922 cv139.995 2.94434 139.855 3.26563 139.824 3.66993 cv1 /0 get_csdsepcs1 sepf147.369 4.76954 mo148.153 4.87696 li148.073 5.41504 147.853 5.83399 147.489 6.13379 cv147.142 6.43653 146.709 6.58887 146.187 6.58887 cv145.546 6.58887 145.019 6.37794 144.631 5.95899 cv144.239 5.54004 144.05 4.93458 144.05 4.15137 cv144.05 3.64454 144.13 3.19922 144.3 2.82032 cv144.468 2.43946 144.721 2.15723 145.072 1.96192 cv145.414 1.7754 145.787 1.68067 146.194 1.68067 cv146.709 1.68067 147.132 1.80958 147.45 2.06641 cv147.772 2.3252 147.983 2.69239 148.073 3.16797 cv147.312 3.2793 li147.229 2.96778 147.099 2.73145 146.907 2.57422 cv146.728 2.41602 146.499 2.33692 146.224 2.33692 cv145.823 2.33692 145.495 2.48145 145.244 2.76954 cv144.993 3.05567 144.858 3.50684 144.858 4.12891 cv144.858 4.75782 144.981 5.21485 145.222 5.5 cv145.473 5.78614 145.787 5.92872 146.177 5.92872 cv146.499 5.92872 146.758 5.83497 146.971 5.64356 cv147.179 5.45411 147.312 5.16309 147.369 4.76954 cv1 /0 get_csdsepcs1 sepf150.564 5.77442 mo150.669 6.47559 li150.441 6.52344 150.241 6.5459 150.073 6.5459 cv149.78 6.5459 149.559 6.50196 149.399 6.41016 cv149.236 6.31641 149.127 6.19727 149.058 6.04786 cv148.994 5.89942 148.969 5.58497 148.969 5.10938 cv148.969 2.40723 li148.361 2.40723 li148.361 1.79493 li148.969 1.79493 li148.969 0.635743 li149.76 0.157227 li149.76 1.79493 li150.564 1.79493 li150.564 2.40723 li149.76 2.40723 li149.76 5.15821 li149.76 5.38575 149.78 5.53126 149.801 5.59473 cv149.829 5.66211 149.878 5.71387 149.94 5.75196 cv149.999 5.79004 150.089 5.80958 150.209 5.80958 cv150.304 5.80958 150.419 5.79688 150.564 5.77442 cv1 /0 get_csdsepcs1 sepf151.544 6.47657 mo152.459 6.47657 li152.459 5.56836 li151.544 5.56836 li151.544 6.47657 li1 /0 get_csdsepcs1 sepf156.955 4.76954 mo157.738 4.87696 li157.657 5.41504 157.437 5.83399 157.079 6.13379 cv156.726 6.43653 156.293 6.58887 155.783 6.58887 cv155.128 6.58887 154.618 6.37794 154.215 5.95899 cv153.826 5.54004 153.631 4.93458 153.631 4.15137 cv153.631 3.64454 153.715 3.19922 153.882 2.82032 cv154.054 2.43946 154.305 2.15723 154.658 1.96192 cv155 1.7754 155.37 1.68067 155.783 1.68067 cv156.293 1.68067 156.713 1.80958 157.036 2.06641 cv157.357 2.3252 157.567 2.69239 157.657 3.16797 cv156.896 3.2793 li156.815 2.96778 156.683 2.73145 156.495 2.57422 cv156.312 2.41602 156.084 2.33692 155.811 2.33692 cv155.413 2.33692 155.081 2.48145 154.831 2.76954 cv154.577 3.05567 154.447 3.50684 154.447 4.12891 cv154.447 4.75782 154.569 5.21485 154.807 5.5 cv155.059 5.78614 155.37 5.92872 155.759 5.92872 cv156.084 5.92872 156.345 5.83497 156.553 5.64356 cv156.764 5.45411 156.896 5.16309 156.955 4.76954 cv1 /0 get_csdsepcs1 sepf158.108 4.13379 mo158.108 3.26368 158.351 2.62012 158.843 2.2002 cv159.243 1.85352 159.735 1.68067 160.321 1.68067 cv160.971 1.68067 161.502 1.89161 161.914 2.31446 cv162.328 2.73731 162.527 3.32325 162.527 4.06641 cv162.527 4.67188 162.436 5.14649 162.254 5.49415 cv162.077 5.83985 161.815 6.10938 161.459 6.29981 cv161.113 6.49219 160.729 6.58887 160.321 6.58887 cv159.666 6.58887 159.123 6.37794 158.723 5.95704 cv158.312 5.53516 158.108 4.92481 158.108 4.13379 cvcp158.923 4.13086 mo158.923 4.73438 159.053 5.18262 159.324 5.48243 cv159.586 5.78028 159.917 5.92872 160.321 5.92872 cv160.721 5.92872 161.051 5.78028 161.323 5.47754 cv161.583 5.17774 161.71 4.71973 161.71 4.10645 cv161.71 3.5254 161.583 3.08497 161.311 2.78614 cv161.051 2.48633 160.721 2.33692 160.321 2.33692 cv159.917 2.33692 159.586 2.48633 159.324 2.78418 cv159.053 3.08204 158.923 3.53126 158.923 4.13086 cv1 /0 get_csdsepcs1 sepf163.458 6.47657 mo163.458 1.78809 li164.181 1.78809 li164.181 2.44532 li164.323 2.21485 164.525 2.0293 164.765 1.88868 cv165.005 1.75 165.287 1.68067 165.596 1.68067 cv165.949 1.68067 166.227 1.75098 166.453 1.89747 cv166.674 2.042 166.835 2.24317 166.924 2.50098 cv167.293 1.95215 167.788 1.68067 168.378 1.68067 cv168.85 1.68067 169.212 1.80958 169.463 2.06446 cv169.713 2.32422 169.843 2.71973 169.843 3.25586 cv169.843 6.47657 li169.04 6.47657 li169.04 3.52344 li169.04 3.20411 169.011 2.97461 168.96 2.83497 cv168.908 2.69727 168.818 2.58301 168.681 2.49805 cv168.549 2.41114 168.388 2.36915 168.196 2.36915 cv167.868 2.36915 167.595 2.4795 167.374 2.69727 cv167.152 2.91797 167.042 3.26954 167.042 3.75196 cv167.042 6.47657 li166.251 6.47657 li166.251 3.42872 li166.251 3.07715 166.179 2.8125 166.047 2.63379 cv165.927 2.45606 165.708 2.36915 165.419 2.36915 cv165.196 2.36915 164.984 2.42774 164.792 2.5459 cv164.606 2.66309 164.471 2.83497 164.381 3.06348 cv164.301 3.28907 164.251 3.61622 164.251 4.04297 cv164.251 6.47657 li163.458 6.47657 li1 /0 get_csdsepcs1 sepf%ADOBeginClientInjection: EndPageContent "AI10"userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse%ADOEndClientInjection: EndPageContent "AI10"% page clipgrestoregrestore % PSGStateAdobe_AGM_Core/AGMCORE_save get restore%%PageTrailer%ADOBeginClientInjection: PageTrailer Start "AI10"%ADOEndClientInjection: PageTrailer Start "AI10"Adobe_AGM_Image/page_trailer get execAdobe_CoolType_Core/page_trailer get execAdobe_AGM_Core/page_trailer get execcurrentdict Adobe_AGM_Utils eq {end} if%ADOBeginClientInjection: PageTrailer End "AI10"%ADOEndClientInjection: PageTrailer End "AI10"%%Trailer%ADOBeginClientInjection: DocumentTrailer Start "AI10"%ADOEndClientInjection: DocumentTrailer Start "AI10"Adobe_AGM_Image/doc_trailer get execAdobe_CoolType_Core/doc_trailer get execAdobe_AGM_Core/doc_trailer get exec%ADOBeginClientInjection: DocumentTrailer End "AI10"%ADOEndClientInjection: DocumentTrailer End "AI10"%%EOF%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 10.0%%AI8_CreatorVersion: 10.0%%For: (Krishna G S) (Focal Image \(India\) Pvt Ltd)%%Title: (SDlogo-3p.eps)%%CreationDate: 5/9/11 4:23 PM%AI9_DataStream%Gb!T<$$0XtOe2S<s+cVRN.YAN^q('!i<Z(Wm*Z9(A!584U"G_4J`[Lo*+Jt),konP^W`e>FZ2=F]\]J*$;&\glIDp[.l/]ZpYs06%_n5g3S,5,l%mPHQIVICeX'OIreh:N:]m0&X2d^HpQ;,Sc%lI3GF&]6%CRaTdW8?KiUKU!Wa%d_ZhVE&;T3j`F>]$+)2@m8-O&)CN%?6"G1?_?62DU0CGmk16al,WkrYIVL<T.]#;5@*lq"odlflLs',p=8Qleb8jG48SO^rfCLY^VAJd5LZR&5$cq-Q()tncOY6r`q;j*%N^*R?MpK`#-e-1Desem?5,PcXhu2d]Vfn]8%KFKJ9_3NVoKrN&7t:MYqr[&*q=4%Ok2H<3dJ3LC,h)R(qt<p,)Q5dh&cH]t])D?n%h<hPmF$3^S5G(/H;\/nNrP_t@:]+&KJ]WDr0_mr0"78>*]t)hq^[Q0Np?TMtH1gG:YAj(,AC_pP?_+X75LKL$(aO:flg<N_gWSb3%P=:<u+GD'/CK^S^[^>;ScC;5NlWDq'a"2]Z`3Of@Zi0mPofm7GYIBQZ/]Wpu?etW1OTigbL@1*pOM?2=mWSL&qtljq>,MM%b.@W@%iHfkJl.YgncYkI&,kG4/s%7pI0-B(fT8C]4DVnmQBduUPo_H,2Mp!3OO$[9"_&%%!pKp/_JOfOa=rL7qBl.??MC+(c4%dKT[<8IM%CSmqmc$S[W@<(!`I0$oHBC.:X+>7%5AUj5poB,37;dLt$.KB7pjkK1_QeSS(:L=a)PH<`drqG<t1uo7ceh?\nS<^j=]X](RKgo)'%Is;E_b4OTFr[X2/FaJSohTPFM]>*2bggQ]9#ei8AWkYGVEVo5prmq+oJ"bK-HRkT/^V@FtIU9^7I&,r_d`J5gXIgTlD:_S<p3S[q%PFnXWjZ-WsmcX9+&+nGBHd$'oq:h0?TA34lrqjaZlPk-P*W+aOhd>5WYLd\,>2,*>LHo#F[m%?/rH\(n<p/Z/BBQ2US+Dj8j7@S'%cLZ<BO6>KWT=]/kDU-PRcH]222J4CMa(P(HSE7)!(=0jc5BCK2bab8sSt2IEDGEu&O&,(U=e4^(F;drmWBYO'p=*p(2eSW/c";%&%3Sr7[g#Pl]`(enZNSE*F3B9;a4#oIWS=H)hT@B'FP#'Lt4:*D7`1>NoZT:975!(qkhAi.-+!9+pEh&3>EBF`Orn&7G@oL_>=ZrmV%H;]f>Xek0KC95@EX/i[tEaI&6C"\`7Ea3?.X--+*Z%V+p/%1gmT$QtAhW0lJS80`;k="JiA=m-SWK>ES=ZT9HFHVY_9dSnckQHS"%P=mg%<BQ=TnMG.C8N`"jQC)0>0o"neM`.#C*mVW:fS#H-*,6lFLD42'_$:cm0`Kk"q,>&u-iVb"?WKAfjJ*7BHfqLimbFAD;n$`o%matN@>^"4X(S#]p=_I*34gV&0@o)HrXgZkuPDqJ&Dk4;eX:/sATtN--L)/"[S4taq0LL7-91T#sYKZj^l]Xi5#oqSgB@\d-e`t->%#s!97=o$VJg4.T/:/6KuM2WBZG$q3-QS3iC_"eu@?bco=J%R'.prPbW5C@t,5LuI055MV.PCNRVrQ44jhWs(#55FJu3:jR91$^Jn%NJ7Cdrq5BQZ,1uq%6"7,+6giGTRZkI6/Sl`qKM6is0Gj8'Dfa&=(#3]]O$$WlB2@\rp=J!$,)Z(T*InC)T2I1*+*".&i\P8+C9K&%qC,:!+[)t$crX:soEU%,iBOCRiUkd'P<QE5KYM-X05)'kC@=lf)uM9LClSAWWupfEH+6:%s%-YaBF"I94"mdEh7dCUq!d_=BD::I%X?J\ZIe[NeIKem5GlIs7a7FN@PK.lChlXYBGe!]s]kj?kP$[Xua61#+cb>%crcJ18UVEesYHE+tLO*;+WV:l"M4]46k486>L1J9X%mr#9<^#m,fqn%=Bfq3[9$/ESgk_"BYs8Vo6?n/^4\f5E=+lhH%U'TJOg[4t4;t!2)N\Ohp]Pl`SG=LbKFSoig)*PT]^V,&?4&*"*%QhT+tJ%C#Tqbu<[FPks1P<uMQlJ9_VG&5(6h-4,\emEhq3YK8U/Uup@kTOjokiq4#-1UM$g2GuBpiUW]mW84!U\t,Omk-dO-'Nh+%oUi=p/b.`%SfaZZI.Y>4m6*=OM>r.LnM)c[(U"ALrVbjF4)IgGT6s,s>l=Ena1(os:Q?M=0+X'#DYng,9`tD[++X=E#4VW_n`KD3%>?o7@ILUr)%j/^(k:6CQ[(6&$k4Y6CCi-LG[SoQQK9%tK]R.X`J&?d4c2Ls3ICb(IJKs^R]Wo4r9$7h,R1Bi"U]5B7o_OFus1eMh%`m^=2^[F(f3UCYhs5DH$^MJ3aLJP\9a^G[oq'G+s2c9\$S]LJF?B>]"eMfF'f<W0*V4)&%:CO]C=+An0Is?G:&,/;r$NGZuCSUpE%8HjSI0DICHQ=%-mbIKicqu)#3"FReo\bc=mr:*1hH?f1/[:St(YB!C]+oh>R+gTAL'cP/[gWS>Y%B9AP:uHbH2Wi)Yk^I*,q;K\2%^;%4-rpGCPJr(Gt\6mpJFR]16qJLZOk.;.>gMF4jj]=@@2Yd5bIIlr%b2L>5gLme/IsBl%T:F9ir`:n`r<`Bo6nM!-s2QGQ^R_n1%2]DU)IK5O?oMO6/pp7QGI!kqUiUZMbIDt&4]7+Rbf*>NoH/,hOIB`)tIIgj(00e:BN<+F2jYVJu[f'f6b3h2m;A]?3r-3Meo_+H6%rp!""h9GWhl/l?\+4C]W)SUq"NW+1smZn=0b1MYe9FZuqGk_.0h=LKdbGXOjj3>>r;g12:Fa.orbjVu9hgOF>?$^0'6$(I'jYj%&%[l6f=UVFITH.mi;/t`-;'1cskD_J;L7Xk9gqY8n<6Q]B6=\MoKcC4F8iZ=n<H/s-%hf#]iBf!K6]Y1tmg0_h<,7j77Df>'Qlf[XG%cbHRCe+;V;?Q.nXT4iUpHh3O])g7,]Lsk.qMuN>(^O=m$D'.YRf+7>ZO)JGGHoeq,9>:#Jp@]R\T2-Q3/fq/JDfJR"ikHSp;8"Q`%h=gBFe%+T<kHA;T_HYceBQ($p*j<')qZC#Oo(g2pim2eFfDC=XTCpGl0?M*F>>;Nkh8b:$B5%a-F18c&e]kntlL)/rrq'IIQ4BmP%Z$F/<^0,m&D;f0A\<hnp4s3OJs4Jhq8_UnU[_J)EK(GT5oPki.l]kTp_]SP7^&3e\pB)G4oaegi]1!WqZQZDWAoeYbM!M[<G=OQe%8<?!?dJ:1/8$4oP*GVlq=-$$M!dL@&qJ,+IWGf-Pr(IU-(ATB?i47a8ZX:=2J>is1&3V)77u?,5Ni]@+mHmcXfre\F1.[IZ23"E!%.R;,d0Cn)C)CnY.e<g5;S7A4(3nAX6g8rS$/l?Bel==Yt%ArBa6nSHhNrJ2=;3"r`j7Ctb*?Vu$\ptCIer?$*4'e#9R>+<Ia"sF=%bWr,Hi?;!YY70)PA#D7I*u)eM?BgItXau&eNL'g.a[PGRe&l,cK<b@>jD.rf9aUEuZj>N^'l=5f]Na'0<0G9s'H0L4CR]$hZ2iIO%J8c5>?0-i81kf7SBo#md*02R]6,1+p+k,-jU'ZL_=<:51+a_FsqXqj>)3@FGdlFGUa9Z:4F@^(eV0_R\QV_3]ND#Xb3jQ`%[18ch%O6aL4@#BL@W[+8<CHT$\3$QG2))<P*2$#UeqAL[-6T$?q&P49F')a7>U#H[o&IuL-kZW-Q('80'.kLu+?S+K1"4+8Mc:)K"F^cO=%6:eQER:)f&-l((ScrPH=C[03II>]#]$n<9O]d`J6C#9>YiakH49eA3J8-d+A4U;BQ'<@gP#O.&A>M&L@N`M1C&OHj#-o`No88h];%9Yh&Z`G0+lLqIH9$j=V_6L.^$PVt/:K%AFbfF^-l6d@_QcII/g;j8Sidn6g>=%E6a8)M[^m*,gbUuRnKOAeWdWaJ*aYKB7B&hO<:%-D,u[WXUrH0dWMp8'?rNVB&QtFt"`AXD%,R!g4j%+C5_7M%q3HcTJ7!a;0tD,m"(.U:eS+NHb^V#"&]n@$9#Z18X8T_4a1No$\t4%ce`c.AGOTFj&0A3=iX$`k!3]'XACmrLU[lA7*LJl;i(<3PD*HXmm3$ub!_Ra=L>F,nj9*j6@=1Md"#2d$.`;JL)=t8:F1l-]X:0-%BFKd#_$Y\5ZC:TFG^#IiJMZ5cd)"]Ji*>YD#daG9Wu`D*iK,l&i]bNs8]!),X9DL.XS-*R0D9b)=FI[TVq(`!P^p[oK.4*V9^m76%W[)nJ/4QY`<4u#3Jr*VdOdH5T/$tAF1A_POeU[u5mANORRjY?Z'sONbk;s'fJVR_*_U]\u([a96O<H$"#2S4f3"5Ejo1"\ae!jK8%.-])m"rh_FWD9lOAie1`;rRmI![?X/6HrqT\AO^a'h>p`FD/ZfQ&4CaM4YTG/IV!574Fc#S2c64Z6q1nM>1q.*#2,)<*=h-MRQLl%AdU)c*1sj;S.$p<^hr:(5%"jgcB_OmL17iRrL.j,$8!jjI^(kg"@OHMp"koeci:PU#f-Au5Q)=scsNIP72cS&&n]1iK@har.uTM+%"qeVp'rj\Gad,S)s(N3fXE_U(&i*>0"Wj_a8?3;9"f^fm66<r>'p5kE&3dc:KJK_ESNZ0m"/$l?TR70$(aHt5N(8T?.'HjZ6sT@.%@VAAiT^OB>V@^LP67e_ZQ3L$a=*Oj&4[/pC=j:>2"/<V2@[>M:iiT-M:6O2eeW/=SroVW(S0o_:Og-r9>(n-UJJJXK3=DmeFRZM:%FLJ=%=(OEukS`)J#ACAuS>2Pr!f0g@AJI-+Pu`F3DMRGWOI?lf3!ll*';pPW8J+B0@f'7G>.l>J+=/Q.!g949lWAl:@Ys>X2ZXIZ%bTI*X@P&6pN6G;=6oV`b"aWp3lmZ^#3Z:D*aiVtR.+($[#=Qnr#lSt32dNOH!p.t8'CB%^_U'Fn&i@fX*03P,'jadD(+)pA[8$:,%/VS`mkT&$l9!iaAoFSHFDF1ptb<eY1"+OJdj:(VsH9j:Di:N6f0[NuH5(T<+T7HYuSAHhQ[@r_0*f_%C1'!KSd5m\J6:oZeoTF6W%Q,6)^-I\7j^st91egAk[.p#E9aI=PS;O'/9!U1kckj#N(],UJLg<IBZ\&(ie6%:.l81^AlP^3B1lHmKQ)-f*M60#c`:k.uh'l;r2%j9+^SG<d/43s2561\2@F4b^m?"3*g#MudK%YbN"<9p58:rZ_;h[?A/O5bMIRlUN$!kjOo_*_Yst%<cAJ3#-r;HRu"!T<9qe(eQ9N%f=Mcs<%6<N+C*-\Ye(I&Q1a$\=>qaV[20QLTo04$%cN3bGf1q)h<qrOMUpWl7+=`2,*j5@ot(OQEY677L2R@baAQ[(L,+90N.<<!%:2NN/HR2'X/IE(6OTJl!\W(eon5<L/FI--O9*9FRb&B=jh=ihG!3.*!@#-$9+Nc!g`mZ(b>%5Ymg5lunQmrl;(>("^.p_(eV55e1%BXVOL#:=>6=d;E@<V/K$>Qci:An!"3D2X[sT*i8O!4p+<rDgTD1;T[G45Mr7"2^=j"NA=_iDN04QoTm5NlWc(\g9L!%cD(*H0VN$%g-@O%Z60mFFo_B9c"]NBa?i\+eK9PB=W\.qJ4Lju>,VgfanqJT(Ygjrq#,Y1>O6*qQ^?nc4/)"3pXKT>\An$B4#Fse]<YQ/)FOW8%BiUiJeVQ"]8D<&.>n<UOWr\'m,3:T<qUbpOeQ_;aYU\Hp;b9>ad86nM4e65F,)[gHX!EZ;pX@iXp<**,+gIsTBpj+0=LFc%PsuM?%-0&To7H<oS*9h<RbW7$c=T*H1<uk.XKeBH`6PNr5Z+=(CeX:Dr)]C>9)2G_r8\'PZU,I,LRl#rWD,XR@#&=[=DBC7G8(TUca&s+$%`IJ*;/#ccs69:aH#'ZbCAk"jjb%ZEOTBk;0mMHkK`EU8U0t?V(.D*!B(e;`$jK'NLD.:7]15o>XgkLhOYA@j\ee#<ZR4[-sL>*IR%,;!3%'5i`u=M@l0jXtT#3kHCtB=@t@G"Y(PI",+=>Nr^>@ibL@MI.)m/q`-Re:X6N!=pojnEK*9o<>CI\Q'Q*0JhMkl!/F^q(EN3%fik=^WnnQ#_H@8IJ/Jmu_Zu-N.dPk50Ip8P/f7M]/L9$tmQ0YkM\0-,MmF,bg^87$QM-H>5K=Y8FeEf1kmu!oAI(F6)r`]sSXFR,%m,PnL&nbb_XCBB<Qo2fa@M3Q]BK_cP)TJc[$R3gC"Z@+Ec+sXQVoSbF,FBiuoml\Cd0`nrO=q:a#>4=gloqpA@\+Sb:#-D&5Yi+/%3(CJ<T1S!^TPc+!/krICI46jf%QQ4O?!'hI*l96-Q3kUZ62+#0()Usba7(--qPj%q5ZGXk0NCK<SlAXZhUf/<N%XYNDmU^s_2NF,%e<0!D';hPi4nXs+c;.N08IDm:;>p-ch_E+\&RZYl%gu`9nS'+6(iT``h/mL&![=Yu`[8A*U"`?cY"Il%@+-G,Tom7F[#+b76WdDa%VQi!""638"PPBRPo+VjND["0Z1=J>bFC9eT-AgjK#2jo481[QR40-@D1'L/#OSgB/"u7HiVhlt-p(oO9,aR&phPp8*0m%jFX'1,E%SKue%R`&Z>gnajP+6iaC/n>_%_Lt'UjgOSEBR0G!EO^_XJl1/'3sdMXYV<^]E5BS]inT@``0j299h:UU';hK38?LI&mBYTk?;?gj%]IoXT-fKbZ&5,YDL9N>DBJPRPBVQbtl]>BS)7"$r,?/j>5Y@q)ERnT9+H?JTqm7,=XpWY;GGHap'.00L%7VUH;e=?4&PAU:=UVik%Z_Xf\CY?*.k/.jaGd6Cr#dC<D41@iI9H+<j0^:I<)D1?h\t>G&b5KM'm5hB:*ja8:W`-4&[1gt'gBgg/Q@&1?dTa!AW`+*&FrFA!%Q'uUCeQZK+F>VK@WZ!L]'F)tZCN!;Sn>l+LXFF@*B]sR%2:Nu*kS`qW,^,mifS)Rk[9"\$$hJD-%"J>4?*!d9Rg^4;]I4;,ml-PH%K.u<+E^-BXjf-^mg!':CqKFPFR7/5j06UqVnDpi,%(eaJ'GCO\)LI,S';(%RqLUYj[((,n)FA$uGlWJcVE.^aejJ*^/Bp<b*?E#n%:j.%S78JiMI@7`mqsIMWG8h?/7%+,n_h?A_K=sV=WJ_KQONNN,21?k[D\.tfoJeo77XQE/6[RkX\eSZbd$kX/l]1fX)gk"tS,l^=%=@oR`+?Ls^_TQ'BS>2;N:/b-*LNn$_oc(njgeg!\`&M-GBE>sM]=%36!^r&NLsjUa*3@u."&jYr^nnr#o\\#tPMmpNo@?@!KpTX<%b[[?IT1KD9X16#!'R&cggau#5d.nn@[Ea*+Kn18ALYQ.hZs&8uf[(9O[fOEY>&cT[)+Q\i\a:R8,4JB?".L$)-7F:P)!iYT$k+bu%Yb7ZF#rZotKG*-JMIhNp#$qR,DAF9?4Ni9<E].lAJPW$o'(4*fola(9$[u>`!pjt.&:J$Ha,XR.\;S`!Q+7?/Slnj@=:c%%T4B?0%E4DeY(Z6tg)FP^.76n(X<g8E`/HBB[r/a7PVA1l=ZoO9^;Be?DSl=LfRTLdmLeK9,"VYH(csRKHT#ZhN2TX"kcjAZD&.')J)hYaa%!BrdD'1K68_PAF;1J#/AP:`Ri&3*l#W%gi,>Q_,98*iUZDt0`7#Af[sRL8@^im.Zkf=MA4)]gS*Q..iqG6lVTE5qJ;,lN$&ncEcd%L:LK1LtFtPXQ\)-_qm[EG-%B/1]RN9K&MLGr^]kiGR1<nOC%!_$=3bPWrY=/B:u$n2Gfm<E$3ShE$IRkPq^=L*!\6-20mp^8eKQ\%@=XZkYRqio&=q)Q]QuArO:`<+"n/kjnefCJ&WhX-dI<jMAfGD6(lbdh?>`Z&V(eP[!aK<.=la<f5Vd@X$S6j&oA[d.;+4.YVO`kM%;"nsm&u:lnk1):k\L+fTilU4%%.A;t.hpiLj>$tT^33E4kd@5.'c3.)B4tXk_TD_W0Pc9Q/O=%5+KL@eFfSYb"Fs]!YBFanKrjni%`(N?mC1a&%"2Tbg%gcc8UUlg8(g-pT9:0RJlJ]8qAfjc#LJSGr22(/6nct/%,Ci/[#fphGD*3k\VE2J"N*%Y"Kep</jQPYUI#4W"%G'W-Q@^MaB0J*U("#k>=AXN"0Z7!HJ"LB8l#S='L'>kFLR620-mX8+e%3jIU;fF31;.=!54S'+/l^&/n"f`*UW^rIaJ2Tc@AcF8F%jJpA&)@R]&Ylqn4SC/$h=E5b?%M?&/dE,Alnr)"5k%@09EQ5`_1XqmH(Rs0D(n"l(55`_&$/eg>cA+iX>ZE6h^.mYU.ni)20:,,e%19<#d\_1Ei=U$%l.C%ZcWA`GqPQdq_in-M)*c)J5V(R3%1YCj&e!#?H1]k]&*cZrT'PjK#0cG-g5uRW?mh5$("&OL:g[XK(91Ei*%fT/PsTo%'=qeDI';GduF2nu,d#@Vqi6.:YEK*S&Pj.qB\Q-Zr".r#:JRY$Q]eI4i9ER73S1LM>hnAhD<\1T72bs5C5$^1o`J@28u%C5+O+962$s&T0t\+PFd)4-Q+1Tl'Tsc);PrgXV5hBPL"lR[R+.*1NAt1$+a:#/X#-T%"19^ECC^SjDBo.G(8+n=6"%PFg`lHA7o\%5lbA_LRJ5W-p.BrRXp8u?R@W4Tk?+"=jNa(0ud"8#/Z[O.&pn+DjjdseI72\:c%ljS^`T9:c5"8:!E[R@A?QA!4emZZj_Boh'W'H%1,.?_da0*V30BU/M75"_/_V%\fremG/<@3FQ@ZGSRn(p_5Z5h/R[1e5TAi2\!!T43cn[)+@h'f;Sp%,4Lm!>!kHn&@5cc+>*J8h<%K)7g^0eg,;J1;G@]n?6oP/04q;cb,]NnA:"Pmdo(:<B77Y&:BP/HZsO'jrVGT+Q9HdkVL(R.='/*9;(IZ]]kVGG@gQ8d5O6-U3h(%L[0,&Z]Y>;R7YL#^mF8^AB]QR)$B.r`dh%1!)QWOZ'*L%/"<!DrM5f-2$;h;TZF9J&5\lH,-#7jrbn+hf4dW<=#7W*q)7$XN'/Mu%dHgWg0O<;GrmYb>Y0i*@ko*rh3M]g0!-8S*%UB0iJjAq1COeue)i(`8`0AnJf9?^krl3Hhn>?gtbu&&I;e]/g!!HSR<]4PTQ&QYj%AHNr74"2+nFjUq%D$)!m-$F-XrD'[GJJ6ot$.UrL(X*:J>h8Smi0H>3qGWXgAi:eCAV7sgMaQ6LK.!\;BNZI\l(=tm$uRNJ`r'&K%NP3"Hg'14l84N,eU:!)$*Trk,p7i*,,82-"CqVh/.CW`AV$A+,bder>Y0,$*P00Z<3"R#fE>HLc"uSh/]$@jf6"K0kB%mb9WQctn%,>MMP(^?TtJe&+=kJj@)PotGg8/,AJ3(lfGJg.hjFib!"2:WFeK%<t5<=@P/7O\r]&K]uA'g"?=dinEhTO4J:CuB!iK!eLq!(m@>%LY3b"/r2`7ChoFQNeFoA]22+_Ue:;,OdbJ[KWX!=UP5j0qchsZH2*"l?@^LP[m3IlM!Me*TL95,QQ.=l^WN\])A:j3Q0QaBWR,<7%Kh"q;<<:d$?ej/.7F%YA=KA_,`p3[Qh>O.)RY??GENfeRcu&$^>9nHKN*&0PPGeN_7U`q6P)]hm(6(<bfa5V#"D;/IfnN)l_l9[T%7+2YZU'COiNC:6GNISeW0l`B9='4md2BJW_WQU@h&p\)o6^+DacH_Le2IiPCKWn:I4#Bq(rnmfj8,GbnLXBlbW8J.Vod12mHiYY%%nH-q#.%YlX\X;[5+sFl1q6;AuZXQ^8)^pq]%uW`@Zu73,6o@Reja/B^AV*$!:8b"B'fqEQU"TS#K<n^#jM,`i#[9(ce5Qom7JtC=%f[qqo'JdO#\//-h1Pn&>'3ikhgQq<Z(_)D8W)8dA?9\iTQkBq+ZTu_q"@$(CUT/KX#SX"cZ+mTD4Ig445$HNT8Vt?67%kalBF"EQ%#QYb'OcG)-Ud]+>#*T5;HN[]JGV6gt$+aLm((p%i(`BNk$0)eRPR9-(8D]2>R.n`>&680b>qSg8JR+:UAdh5FKVglcE6<`<ki'j@%He]l\O\1L':\kKH>d0;mA\01HBY@'[9gQXtZ<fPSjCE3nP6h>#$9)EJ1/a@*qtD:',UF/@i(^:\W]ZC\?.SU#&!8uDm$(0T3Qt_2%/&YJNWJq@5'1!dK?KS7;/Ve9NjTW>BE.eBV_l[5pG\<>+gak8a%inkCQaJ@K#%T];bTl@<NMElF&HF>M/9hQ/B/lgbp=A:^k8_L8%!X(D5fno^eWeS+B>C_:Cd$4krY+o7`>\2J+I-[PbQ4Q#M<pu!gXW2k.WMVJifi*I*%VjmP9cDh+oaQSuN$BH/_l>Eu5mG._>(o$+%3Fbp73)JcuL(9eh^,LYI@EAVSn$<=o0>cX_==4RhmVNN'm8PZ&&f`9^B"RIh"jYU2hN0RaFl#QIb1bV$X%)\\S`Td)W;GBoQA-4X%a6R/fkirer#a:^u&mnQ>/DjI25`&#3)6bPa$I5#S5M]G&PU;3]'q0E.HZ>52-u\+,L&aE@F(LIPd'hWaTOc;t&Qci"N8.6!0<g=5%05p-bC=<HoL3@0c-h;N"A-a#?gs9f/GAkr2VYAM>%rY(12)uH)L`@F>?rTtiDUTm.")QbAEnT:YBUJ>la^)CJpC4&nKIoPG<V8N5%dY'lIPeoDF/S&Rc>L'^H=s+M?35+o.f+dYtG/:X-]M=QAA`GY6Rtr9rGCH(25cU8SLOb$?o*PfHQAo3e@WC1X7^$tGAB+d#HKQq8%&T.$!=4N6=6MTrJE/:'Wlq*?f"<)`26pd5\(d`gl%Qb44,B*pSF:MdaI`niabrr]L5,X6g@I7#Dn5Y_RCP"[d2g'G$'X^b;+[tBt%BYdnT(hipmBma.fY4.N_3S)rHS6%We+"[7_9L[#ZANA5%jM$su$>r$ujYlDo@MV'.I!=P)'H1bp9:r_P,07[B1_X^oC2.#/5W^g0%e,J8+BLcKjCjd_<>s0BORg!C_Nt8153$(0^c$"4jIJr\M,/)$GeAgPGcnsS7^+RDS8,PoG=6FHd;l?E5R:6[orKJNcYluHC.?DOT%YeuWZ<)41i;beiO8f=OsIVX=oT(7]Md8\.8k@_^<V5HG-;qO')Gso<9l8*h12k5$Uo5r-;h<:@NV]5[uV8aqh<0_l29lF#R)B\SH%V]PF1NR^h#kdtjPlGn:,pmCZk>sIHGl,FV(<=%udLGR4+VtO[cj%'T\bs>Od9S(af9jP[Ta+f70ST+^oDqn173)Wn[HCnE2^>=7Y%OVo.VFNCXN$5,ML%QVV,kae(Oq$cI1+4+,h?1QL\&@R,Q2-_bnXJi1gYEq_W/Q(mB\2;Y68bnFE(uX?e_L--PqI\:GagX`1`\a/T%Y\,jhee-2uQ/qcG@B$Qh/G[j&;Jf`D^,94?NOV%M=W#17gnK13S,p;\%S1MtkU!8f_7)nHM;pe>XV(T5lIKV5_0AC$b,GLAnkf1n%`4\n)*OGul[cmUr&R&)=r9LafVU<n*@L/rY8_Ujt!<(oeJ8fS"!PURo]k=o9no[3mbOjf8#@/Qdpu7*</T-Rk9rH.2g`6,<WHF$#%;gbP8Ug*Cb]/&]<E+#):s(kogDiPZ6nn#Nq_H`Y^.`YU\XJTq+"LpM\P&n5r@U@ndpV].jr1pfA]fP_[XW:J5o^=X%Ks-MQ0G!4+%aCCCU2soa`RH6ID9]g%t\k2JRSV`P:b(j1Cieo$^=e\(U`K?!1O*`+K'K+me8S\*2L<FogP'TbW1l?&aWQ4?iC9C]M!aB4T9Fn'P%'9$Z1m$]6=VC;KR$.;Nlb+V<"AkMZg:5IWKF.7iG7B2!U1Q,6!Ug[g!R8$7X55c7^U:;&OB6FL/1HQ`PbQ=_8iI&=5Bp][g1Ws^2%iutiDp<6u&6+sboR3b*.jRCB&$:UL/m$USHpRi<<[]O&jc'Tr_=_,GUeMl0r76hEUXKG^-B%,A]29T3sieq*KfJTS9IJ.DaB@S:T%Sll8LZ3t3icbCWbB0\Vd*GQ3*V2(4N9IOj\\?WKA^?h:_n.D\\O'T(`^]$*(+&S#;62J)obRbO5WjRFAZWO*+<\pU-IRnXaH"Kp'%+DDd,`*!#5bFkG0VBERZWFm!Y+5LJW`SP5J%D-3YT];pte$M.:X9Ne(/De?sHHeC,iHb*NW,EHX$;OScgsIkFRO:[(Q?%P#3Z1.@%W*H:#\Rr)k>b5=+J0@nJX2C8m5>!M1<H$MlK7[02*UN'\7@JX$rJW$4l;2c0gB`YVV:1;W+":reNHu&&D\dlRYQ@"e1SDJ8!Hm;d%JCHLc^oOqq4U>1Dr)3l'2Bq7oD\`=[L73$=)bocA^0.O3$k$?(<A!FaI'WfH$TuB3Iud5\q([n'pW[a?L+ZkT*7WknZaAnk]aLLI%=g5qE2'rgI=TUDu6[c9`J#e$"%0U0A@b&d,h^li52n!=P6d]):fG<@\Vpa^s7H',u"s2@]AjCdN1W7#\PT#$Qh^gR)0.XuT=WX.=%g5$7I[-p_Ih2Qg#F3moeh^kmpM.)!6d4B&*c)+(3;s,^a%<I`qSAbspb9/lZ\R(a$ZICnXVa`flnBEk/.A#5_9Du/Cq`N^(:^/']%[@s9&cJ=?co[u>LPkb^Pp<!Z$7BO)T@LnQ%[)#+-AL_[;*Nm5Oe-k"bSUCK(rAHB3.h>2h_kuJr0Y5DS.@gKt6st;]1]qm^!]q8C%$hb]p)ek!E1`e^Yd:NW/cH=[m'*4Uk`HPuXBS9M/KZ4l*KDQ4'%[=GUfEqhu];3K4g2KVU<Aca7Ls(h*3>9uZ'a4n7=jnuc8jB!,%T3&-"Q32SjfUhqIiC2q[D_^T,Ukapg/OW;_lXddhfgVB.R^.Ud[*h*P9c0ZY4_OrS9O?oMA'%.HG'"2&;:q$=U$(O=hQ((4aALu!%VDO%W!c/(Z[s-q(UsTM`fogka-,pZb[BTm?\d7594/Ok`@n=+l6ibsT*fBYI]re<pE6;S8@\5c5_Xp\b[7];q*doZ)&Ro'76R&SV%gRYLQo*^SNEBdZ2&TV_]"[1Q.oSAPR[E#PMP9FEO<jKCb#%p3(?h9TK\mo!a]>_RimlBi%V+&\n\sK'MZ=D\k`Fd33\tco/j.s?U%-j.m7^TMp?8"AEr]o9>VA/77X,dXS$e@+_C71"rbLFZZ4g&YoY(FUcMGsZRZoWPR-C!hQ:Ks`R78Wp#:6V*'6H/8lR<4]`p$<2Qi%&+t0dGM0MNM35`FGq\+2.LS%ZdF,:@>)cCkn(8#4,r'.Gd(KEiS$9_8+;^+ia0`NFV7]pmXf1OTQsU'kSX*tQ?;$fJ]r7<M``MA1%<9.q.5OV$0B`)o0/%j5@[sQ]YVT#P`B,29&T^(Sf0^V:t7^l\rFY>5W)fB(dg08aWMhp]H_KoIN>e&od464?WH8.R-!1L"02/B'u%MfcKs*=XH&fbC"c0!4*_;s7Uk,G7PF"^DHdWo5:=O^O`S9rh0)<.'P@LBu8f*]6rj*f$/490!J\biC86Jf/A:A:"MYF\oB=N@%X3%3]A0<VtsDTa)]]tQoN?)!$"fY0,)EA2-p:6Wqscd$Lk26-^[8=,s4.]Qds1$aY$'J?8BX>3/j95JE'Hc.^mo?QU+Asi?cZ5Pu!/X%qHgsjrHTCMN']?>qHHfF("IK/hI;E+niK0PJJDGDbu3%.LY.(Rp."F'Te(Za[>#(c#fKbUeBhn9G.=n%Su?7Dag#-BjXgpo,Bqe3%%3$D/Bf,1s6D^c[72m%GgWcClG0'dtV$=a-%3iq5QQNbu/SM(@q`Jt1d#^o<]hZ>=BO&=O<SYHgQof,EfQ[)l(hL=R3pudVZDY[0%jpsj\[]u8GN@Q-7VL\<k-FRRF3@fYpD/B9W3PV&TJ`u4$9(KL)NgYO<h\j_&"m4<4:gc7)[;!u(N!OeJ]P^JdZ&ua3?dng#)h6$b%%92]T14?65$?<ASTib&i7jLk1S"X%+V6DWHX1QYf];3(K4*X>_bs6F<bj5lf$>'cu'B50)/6-n[C"*FO.-g#+f0c";MigDTd"P??%99?AE5Xf"tQ9S3'N@bDG8#:2E24"[Qd$trT$cne[2e"`IX<=>R9h?nIjAl@hX`1=9#(2-469W0XCe4$f.BY#R\HJ6;Z9^P2I/"#!%d#\[]$/u4XmYGAeq#]a?0qXr[[geHi_A[eHhkl:A:hOD'V/W?<2U8dIWqOAme`_g#'`$PoP@/5S:!'DFPJ+n\JK;6C0=M5%a!M1X%a1VRQW+`+7(Ot'N93d/+`"m`o[4q$Y^_E7@GR;3+/f<nu@.oofdI8L4cU%+8C/r6QiT.F<Z)oE7p,m0d4&Fs0lsjmE5hOpI9cpdJ%MK*oZ"iJEmLU(k&WN&!n%D"pR@+s]V=p,DF/$_FG/F"S#H;5]P0JJI:Wi-*X_T9uM8%"VgmnfV!:/0^6mfjtMo&/5Q.1>+Aaot-F%WqDRM(V.mmTKVgjiim8o7M9<?\D@Fdkqut&Y?SXA<o&><a4Mb2Z=05+Po<h(-uSP',fP[e[Sb^:_E!c7Oi6MY^d=#ZOpmDF`C[*U%Lft9$>Rkd\9!5EP]_`sEV6e/mH,cs\9?>)XPV>&e>-We;P#7+8EBLE!``.P_'RXu&EYH.,),X0WU^-ZIYT002>[mf)3=eNY"/tW>%0@PS1-db.g1P`g^KRkc*ZF0h0<J1BN9a3"Uc'@+TdPtI_A7),XB2eMLVfHP'Pq:#I<,XVDhIO=o:[*J.RII)$_1@Ta](,,1C^t=G%:J^e6UW8K?31`<a9o4@HrD!*K88*-P2,8<->>u!gYC[090ed+nE"h7l9sJQYDdfVD(;gi6`P%11ei^ne\Y[SHbR00JH-*e%Ofq5J%m&S;'e[i4,L]m+B*b5]'GV<:CVDQe8)n&XQTG+%@isAYN1&%Kh!d5HBf+"?,%k>"u$cuCe")gj;ZO7.)`7_QL:/.6\YF=A$Ec/Pp%;m@3i_^jCb?2;/&2WY\o%0^i?]'jm#5p]k\loeYtl9FFrGHD@,3fk6>_OA`%bR5Pp6612RohR.KO`bJHP,Mg+lr^Z#QQaXEGL4,b%i(-hmeh11'*X^%)Q&qE8gT>p8-FlkQd$D3Z?G#a6-[Cd:Rk'#%=>f#'IEC9s:XFf[$^=>$FXH]$<m<#QI2_,_raZG(cY7SO>L*+h%1Q1Z(1Y=\</#Be9dAg9mV[UL%I9Jj)_OHb=@jHa0%;88t8$J#^45IGtSaAnI_1ap.E?)hf%Yp`!p4QV.cA!e9$&GAYpN)Fb/0&:K%aZXZ^,GblSlk@N*g=W\Y-27e6eC)_--NGms.JsL.']+a2aq:"q?Km/rOeVPcNdq1/I@*?oj>j@!d_n0X8_rDLW5W\7Jsrp[W@c^N%cTd!R5c=k+O\gu>2^0:D8/\\b6QR+dl4`90W+eD1Ws4Z]<'oqKO+:\>\"]fCW*O+@H<9aE0t*AS\`,c=m#oaGNd]ii.*J5%;FH-Z%JSBfa%?(?S<NZY^,,5p0L.4ni[!K>`%,$D>NiqUrWjTH>enNRdOmuR[Z^X9s7rhu1Zdt.!c?;Ed>!#VBRq"dlG/s$a8Y3Jl;GNF%%Y1L&FZE[#T`),3NONo_jRbBA/6#Fh`;VU_)VA?KhCAWrH[=)FWD7>UQC;:Fhh6p*#bk,5\E]MWmUe1kL.#?T;OZ1_rlg6Gl.;[i5%G1UP@m<j!KIp2>l[WK3>CC5>cgQC3XeI'aSFsM.[``QA\a(?5!gCpuCD!t3T5oEorG#I'T[G"A1N][NHJV9c+,6?>/4F0r\1%J.Q%[2g^0G37kUd+^l4=rA?U<k-Q"8.`d;gQ>Il@lU3d\h2I$Tsl7L?#h!ThEI$p\'LH*mHDT((6@\HSAMGSf;?#e1M`NRFuL:$7:7>t%^WttAg!2;7,k<EBD*ZTo:?GR&0!"A;a48\m?S_"J;qlLlFjo%b6:t.DF^/Grc44nED9>;n\r+[&TWRR;$oOf?_\<K(,umi[/(DNf%/i#fC*%,<[X!r(53p]^.$T2+AQ6+OT>XF0K,S?0s;f_^$.^!RKrjmtK,>H,t=As3d:L2#[q]q8JkdVI0S[.L)i,cahJ:8MWB9krr%RIB0,e?lbt'P1TCf?uf>30JL$WXKI[(Q#\'X^Rsa%RbHpc"`*?N]SJ[j"d@#R&8oT+St#tj16A*5T2[9(*L"M6n&HWe817NS0Z_9%Xf[Hj/%PGNPB6=!a[M'M=Ib+&mT%u@;bp>43MSG_U*YAeX=ae+Ej<K`Y)d8,]4Bg,>g1T2??O_;8)p<*!qTSj7+C#kP-3qV+K:'#%M3dI*B6'a-@Zh*T"=U.7]]=BBHZmf:76$*dMffPAU#U=]Caq("QIHr6A?V;??,fX6L990LLR("UUf(eR[VJlaiUh#(Mmk8mXW:g!%bk9/L114#JIiS'[.>n&C/1$OWJd1S78a^pRX5$#Z%&,@O.[hsA9O^P!![9A\9g-=6E6[_)*Anl<kU-Y<U^SjeT#&rl_Mm!RiJt2f%c4tV"_[b08+Kq!t*=^+iji]4%"E:@$fsQ\?XDZ,GEd*&0+Ou0+.&V+pDq%fE\;E3pWd5UD6s@;<(b?5rF]40F:(34&`peF)4-rq/%E^CR\\7oY>7V4Q_;*PilS2L<L2CY2D6o@T2irq"B)!8-9-'j6f[3]U[5p1JPF&KSJ(6LI)+UD@AWNt?j$.@,d>jO_AZ-ECfCR11i%nI:M8h'f0.0ZV=^M!6U-8/]`O^"/nX9Rn_+AIUEm28Q7.AD16P]rM<Sb#9mkRksb`aC.jAkHib)"u[6Kl*jQGb!PC'hXn/*p7>jP%PuM==b51nu1cE8l[2S5O?/&p7r%4L/[aQWG5+)QZ2GAY]fgFCe`ma-[All[tE<@:G*5H/Yh<f+fMF4ppq9$VQZA-UE-i)oH+\61[%`Dl&kmg*1F4"3[0Rm<.bkPW"TnUh`']W<2lkg!'mj@_8!%j8#(02!p0XYJ\e'`C&s?Tp"C^/[L.Mo93RNTOnb.C1X6;2\E]QuIV"%hotVH.cCD](?D*/)hDqANRgW50Xr@jk3:Gt)O;29=bPF9%n'*`I$<_kHKhC(#l,%R@p8$5kXP^\8[2h9^o9I?Q@mZI0ngsCf\Q7%%BGOb$S.RdRB`<DGNia-)g.!q:<htkNS`41o#ND2IY:7mcn(g?n%T]\??$>4CUbOH>c,eg;@3LEb%$$MmNR+S]r]Tme?^cl)o]TUg%^?a0&de)aS2*JPFeFi&)^.FCZ]#@%!mK7AQMV6\)g*MXiJsj\>fV:KqMSiC[XdP'/E?0Df25nom^TYWi;54@OeE@(UC@mI@)Ef<>%NQ+JK]h]"n)H`GlNHkFSP?l[Oe1R,qk`'DT=%uc'k[5[\I3P4W!^i[c%(InqX;.f)>'-uPEIH906#nRD=AC--[oKXD/UEcI],$AT%B"o`s_2Un=%P9_`+%XkTnWL!L(8=7lJP9g#BJi,g*mNRq=K';n@YPR*qUP7-.iVY=1MbE@qAQ4NUamV8ek1$uI.s:f1cX0mjc!hn%0lkZY$VOBe>0+qr4`"kab=UfhZuT;oUGlA]W<FnHUm5]EVM8(9Q<;(\Z[W!aE/-EiiAu1u#K,]26[TOj[IQ1a;o9ES92h#''d!:W%6&85Eh]=K:eeah0N&7$X^m[t,82J/>9atH$BZ3CsN>?$.mHuJ_2+#7]d;<VALt-[WW<N6Bp9:M>GC1!>KOkJ(/D*R!]A=mV[qLOo%%K"h;^<NUr?PqC6)_n@HgktJUUY=AX@8oVNI'V"(,"Au%[)d_UWaQ=)V^-:(an2j'McQ;c7c%Uj`24<5E3"iP@s:006P9"GGB9O!%./;p;plhOgf[OG9dP._C)\!9q2RS)ES(`gX9b%&G%IFq#)W$e9'Sj73@Vo-2=JP;23>bt:T#uog[1sO\q")mZK4UNU8AfZ&ChhT(%2ogAC)qAb>HcMSm?D8;@JCt;`?b'"V$&?=>7i"(ICkV3Z2<ad"H6>g44k^sEI)pbSj]_-`mTfhR_^6t@Ij:SF.%17VdJlI$*G@(2%%R`h*Tlfj-$@^,S@)V?AE&,93iJ[qgcF+'*P1Tb.4tq9olY.!\Z\PcVFMTJ9QamtI2P0=5E=eVZd[r[Q,u$#F_)MO.g68Bd!Kibu%T#niOX7sQs0)S-MVa\]e,=]C%daEVmC-/"*"`nPjdtLlr9Gp`Fq7hg.F'<7l[>InC)/!+=e#H6KQ#tOODA/Sp+=:ZE?p/7MHM.n.%?hmR(TICCG.&(0;a\/<5XJsDf'N)*.Uff+c1o`c!Tnn:)/Uj:F@Z2MIL:E/H-.33qLggL4n_FC9>ft=b%&&JQEMqGe]gO:B&'K'g%(k!'g9dn:X'8cm-68A?1@?W#PqaXg:Tbr1cZ>W&aHIY6l:uiN6>.^d@`Rm?rgk?s;1%<4QS&"@515'+D]A<`%Bt\./FX8W4d"LBn%n!u2Hj=c1\I(k"EMIV-k:dh^K&=5^<2H+N1MAUt,X[FS3A4;\d9djK3aj*58&G[;>QZng913F`TYq!l?$7.*qWL+kE@ut["=Xo#,%>T-M&I]IOe8]?5hWAnB3("&)m(bUr.G[%3KY<iggC.V8R'`23[EJM)m3Yeoa\`j?=VH0-?hLo?3@`k/"_ls;&bX-;c<"k.9a1?Pb%@f(7Ol6Y449Hr>-(OMaF(h@,4^;aKtc#Q4`S#Wu$%SE*UMtm"MW!?m4&(oGkHuX;2-:MC:Hf2;t)mGe&*#=Xia5iFbF.87tc>A,P%4Z=Kmcq%?eNVbUc/OM#!=giB0(C+DgJZ+JoCV&2bUa^T)nmPK-M/KkNn<@'NK:be6N^]Ah?&uVcXjg6+Z+JH%Q.aTqiJm0G&=7QE%CbONXpG]`"G=..#5O[.Y(79J2"9W?PM!>?J,gIq5!cJpjI(-6tH?&XW=qGnMpG`5rlpaf["c^Z@l%r&:\5lF$XC/R*GL%be$\2oi%&5@LT+Bn#H_DJuTl:JrM^TXmc50fYJ(ff'HD.DXZ0m-rtfN2:2\Ws6qn#<L'e<4`j[WKp)k1d6t>4cZ]qrYLCkEP.$;7N+"aU4Ja%X$hFC;iODRg28:T#8:AJS$.a6npp5=dA(6J@+g-dkb35"iX-jP7$A>X9=,@j5U#+>I@DFMP,&oH>e#lMCJg)^&O-uTE#On\8J=@b%_?JM\m5_,Bd)$QNVBm@U]ua4pRcP7S4HHb'VeR8_3Ee<haj"93RGV&AU=Ob$>QLKtAV(G*q>t&A6sGG5MaP!5dl.:TV%<5;b46bo%';d344.+!Re/2n>)2Ji7TN-JOTsKmG7BJ^#hgRm@OB2"*PD=\`:*rCnI=dV$[5RD8lItphFH3RlSWV8SYVcmuPmOP+YIAO(`.[N"%5YV%t!foo2Y8AiDb+Ek[,#L46&`Vt#7$HOVCg+R*Jk?M]RPM4%E=<T2B8`k5r,j)J;Jfbq;GA!=SQioCr]!ZAX7j];UYZIB[0\q\%`Q--%\QuptKqm6nnpDOE_q25[\=='Ofq'b6l:&SQAl\4U6.?8^or-t+3@g;U2Il`rj+O',N?37m@/Y9%&.J4J-`\'(T>fDppX^4J%5AhQM^0J?rn`o\ip?TcBS(m>jlHRf>qsF7Nrr1mPnp1+urj%"E\:&[PGhfHo^3fVr#X-V)^Nabl`VJeK".&JC56~>%AI9_PrivateDataEnd